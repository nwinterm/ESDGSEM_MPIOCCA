//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.



kernel void ShockCapturing(const int Nelem,
                           const dfloat * restrict  Q,
                           const dfloat * restrict  b,
                           const dfloat * restrict VdmInv,
                           const dfloat * restrict EleSizes,
                           dfloat * restrict  ViscPara,
                           dfloat * restrict  ViscParaForPlot)
{



    for(int ie = 0; ie < Nelem; ie++; outer0)
    {



        shared dfloat s_Q1modal[ngl][ngl];
        shared dfloat s_VdmInv[ngl][ngl];
        shared dfloat s_Q1[ngl][ngl];



        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {
                const int id=j*ngl+i;
                const int Fid = ie*ngl2*Neq   +j*ngl+i;
                const int Xid = ie*ngl2   +j*ngl+i;
                s_VdmInv[i][j]=VdmInv[id];

                //ABUSE OF NOTATION, THESE ARE NODAL VALUES NOW

                const dfloat r_h = Q[Fid];
                const dfloat r_b = b[Xid];
                const dfloat r_h2 = r_h*r_h;
		const dfloat r_ShockIndicator=r_b+r_h;
               // const dfloat r_ShockIndicator=pow(1000.0*(r_b+r_h)-h_zero,2);

                s_Q1modal[i][j]=r_ShockIndicator;

            }
        }

        barrier(localMemFence);

        // TRANSFORM INTO MODAL BASIS

        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {


                dfloat Q1modal=zero;



                // calc Vinv * Q
                occaUnroll(ngl)
                for (int l=0; l<ngl; ++l)
                {
                    Q1modal+= s_VdmInv[l][i] * s_Q1modal[l][j];

                }

                // set s_Q1modal to Vinv * Q
                s_Q1[i][j]=Q1modal;



            }
        }


        barrier(localMemFence);




        // TRANSFORM INTO MODAL BASIS

        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {


                dfloat Q1modal=zero;



                // calc VQ * Vinv
                occaUnroll(ngl)
                for (int l=0; l<ngl; ++l)
                {

                    Q1modal+= s_Q1[i][l] * s_VdmInv[l][j] ;




                }

                s_Q1modal[i][j]=Q1modal;


            }
        }


        barrier(localMemFence);


        // CALC DOF ENERGY INDICATOR

        for (int k=0; k<1; ++k; inner0)
        {
            dfloat sigma_dof = zero;
            dfloat zaehler1 = zero;
            dfloat nenner1 = zero;
            dfloat zaehler2 = zero;
            dfloat nenner2 = zero;
            dfloat term1=zero;
            dfloat term2=zero;

            dfloat viscStar=zero;

            occaUnroll(ngl-1)
            for (int i=0; i<ngl-1; ++i)
            {
                zaehler1+= s_Q1modal[i][ngl-1]*s_Q1modal[i][ngl-1] + s_Q1modal[ngl-1][i]*s_Q1modal[ngl-1][i]  ;

            }
            zaehler1+= s_Q1modal[ngl-1][ngl-1]*s_Q1modal[ngl-1][ngl-1];

            occaUnroll(ngl-2)
            for (int i=0; i<ngl-2; ++i)
            {
                zaehler2+= s_Q1modal[i][ngl-2]*s_Q1modal[i][ngl-2] + s_Q1modal[ngl-2][i]*s_Q1modal[ngl-2][i]  ;

            }

            zaehler2+= s_Q1modal[ngl-2][ngl-2]*s_Q1modal[ngl-2][ngl-2];

            occaUnroll(ngl)
            for (int i=0; i<ngl; ++i)
            {
                occaUnroll(ngl)
                for (int j=0; j<ngl; ++j)
                {
                    nenner1+= s_Q1modal[i][j]*s_Q1modal[i][j] ;
                }
            }
            occaUnroll(ngl-1)
            for (int i=0; i<ngl-1; ++i)
            {
                occaUnroll(ngl-1)
                for (int j=0; j<ngl-1; ++j)
                {
                    nenner2+= s_Q1modal[i][j]*s_Q1modal[i][j] ;
                }
            }

            if (nenner1<ZeroTOL)
            {
                term1=zero;
            }
            else
            {
                term1= zaehler1/nenner1 ;
            }
            if (nenner1<ZeroTOL)
            {
                term2=zero;
            }
            else
            {
                term2= zaehler2/nenner2 ;
            }






            sigma_dof = max(term1,term2);
            sigma_dof = log10(sigma_dof);
            if (sigmaMin >= sigma_dof)
            {
                viscStar    =   zero;
            }
            else if(sigmaMax >=sigma_dof)
            {
                dfloat delta = one+sin(PI*(sigma_dof - half*(sigmaMax + sigmaMin))/(sigmaMax - sigmaMin)) ;
                viscStar    =   eps0 * half * delta;
            }
            else
            {
                viscStar    =   eps0;
            }




            ViscPara[ie] = viscStar;
            ViscParaForPlot[ie] = viscStar;



        }


    }\\elem



}//kernel
