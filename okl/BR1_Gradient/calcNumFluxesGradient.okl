kernel void calcNumFluxesGradient(const int Nfaces,
                                  const int * restrict  EdgeData,
                                  const dfloat * restrict  normalx,
                                  const dfloat * restrict  normaly,
                                  const dfloat * restrict Scal,
                                  const dfloat * restrict  qL,
                                  const dfloat * restrict  qR,
                                  const dfloat * restrict  BL,
                                  const dfloat * restrict  BR,
                                  dfloat * restrict  SurfGradientsX,
                                  dfloat * restrict  SurfGradientsY)
{
    for (int ifa=0; ifa<Nfaces; ifa++; outer0)
    {


        for(int i=0; i<ngl; i++; inner0)
        {

            const int iel           =EdgeData[8*ifa];
            const int ier           =EdgeData[8*ifa+1];
            const int cpuL          =EdgeData[8*ifa+5];     // rank of cpuL
            const int cpuR          =EdgeData[8*ifa+6];     // rank of cpuR


            const int edgeID=ifa*ngl*Neq + i;           //for values!!

            const int edgeIDX=ifa*ngl + i;              //for normals!!
            const dfloat nx=normalx[edgeIDX];
            const dfloat ny=normaly[edgeIDX];
            const dfloat scaling=Scal[edgeIDX];

            dfloat NumFlux[Neq];

            const dfloat bL=BL[edgeIDX];
            const dfloat bR=BR[edgeIDX];

            dfloat hL;
            dfloat huL;
            dfloat hvL;
            dfloat hR;
            dfloat huR;
            dfloat hvR;
            if (cpuL == -1 )
            {
                hL=qR[edgeID];
                huL=qR[edgeID+ngl];
                hvL=qR[edgeID+ngl+ngl];

            }
            else
            {
                hL=qL[edgeID];
                huL=qL[edgeID+ngl];
                hvL=qL[edgeID+ngl+ngl];
            }

            if (cpuR ==-1 )
            {
                hR=qL[edgeID];
                huR=qL[edgeID+ngl];
                hvR=qL[edgeID+ngl+ngl];
            }
            else
            {
                hR=qR[edgeID];
                huR=qR[edgeID+ngl];
                hvR=qR[edgeID+ngl+ngl];
            }


            dfloat HL;
            dfloat HR;



            dfloat hLinv;
            if (hL>=PosPresTOL)
            {
                hLinv =  one/hL;
            }
            else
            {
                hLinv = zero;
            }
            dfloat hRinv;
            if (hR>=PosPresTOL)
            {
                hRinv =  one/hR;
            }
            else
            {
                hRinv = zero;
            }



            const dfloat uL =  huL*hLinv ;
            const dfloat uR =  huR*hRinv ;
            const dfloat vL =  hvL*hLinv ;
            const dfloat vR =  hvR*hRinv ;




            NumFlux[0]=zero;
            NumFlux[1]=half*(uL+uR );
            NumFlux[2]=half*(vL+vR );

            SurfGradientsX[edgeID]          =  nx * scaling*geomFace*  NumFlux[0];
            SurfGradientsX[edgeID+ngl]      =  nx * scaling*geomFace*  NumFlux[1];
            SurfGradientsX[edgeID+ngl+ngl]  =  nx * scaling*geomFace*  NumFlux[2];

            SurfGradientsY[edgeID]          =  ny * scaling*geomFace*  NumFlux[0];
            SurfGradientsY[edgeID+ngl]      =  ny * scaling*geomFace*  NumFlux[1];
            SurfGradientsY[edgeID+ngl+ngl]  =  ny * scaling*geomFace*  NumFlux[2];


        }
    }





}
