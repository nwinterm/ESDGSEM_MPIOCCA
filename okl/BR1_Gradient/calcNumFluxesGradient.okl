//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.


kernel void calcNumFluxesGradient(const int Nfaces,
                                  const int * restrict  EdgeData,
                                  const dfloat * restrict  normalx,
                                  const dfloat * restrict  normaly,
                                  const dfloat * restrict Scal,
                                  const dfloat * restrict  qL,
                                  const dfloat * restrict  qR,
                                  dfloat * restrict  SurfGradientsX,
                                  dfloat * restrict  SurfGradientsY)
{
    for (int ifa_base=0; ifa_base<Nfaces; ifa_base+=Nedgepad; outer0)
    {



        for (int ifa_inner = 0; ifa_inner < Nedgepad; ifa_inner++; inner1)
        {
            for(int i=0; i<ngl; i++; inner0)
            {

                const int ifa = ifa_base + ifa_inner;

                if (ifa<Nfaces)
                {

            const int iel           =EdgeData[8*ifa];
            const int ier           =EdgeData[8*ifa+1];
            const int cpuL          =EdgeData[8*ifa+5];     // rank of cpuL
            const int cpuR          =EdgeData[8*ifa+6];     // rank of cpuR


            const int edgeID=ifa*ngl*Neq + i;           //for values!!
	    const int edgeIDgrad=ifa*ngl*(Neq-1) + i;           //for values!!

            const int edgeIDX=ifa*ngl + i;              //for normals!!
            const dfloat nx=normalx[edgeIDX];
            const dfloat ny=normaly[edgeIDX];
            const dfloat scaling=Scal[edgeIDX];

            dfloat NumFlux[Neq-1];


            dfloat hL;
            dfloat huL;
            dfloat hvL;
            dfloat hR;
            dfloat huR;
            dfloat hvR;
            if (cpuL == -1 )
            {
                hL=qR[edgeID];
                huL=qR[edgeID+ngl];
                hvL=qR[edgeID+ngl+ngl];

            }
            else
            {
                hL=qL[edgeID];
                huL=qL[edgeID+ngl];
                hvL=qL[edgeID+ngl+ngl];
            }

            if (cpuR ==-1 )
            {
                hR=qL[edgeID];
                huR=qL[edgeID+ngl];
                hvR=qL[edgeID+ngl+ngl];
            }
            else
            {
                hR=qR[edgeID];
                huR=qR[edgeID+ngl];
                hvR=qR[edgeID+ngl+ngl];
            }



            dfloat hLinv;
            if (hL>PosPresTOL)
            {
                hLinv =  one/hL;
            }
            else
            {
                hLinv = zero;
            }
            dfloat hRinv;
            if (hR>PosPresTOL)
            {
                hRinv =  one/hR;
            }
            else
            {
                hRinv = zero;
            }



            const dfloat uL =  huL*hLinv ;
            const dfloat uR =  huR*hRinv ;
            const dfloat vL =  hvL*hLinv ;
            const dfloat vR =  hvR*hRinv ;


            SurfGradientsX[edgeIDgrad]          =  nx * scaling*geomFace*  half*(uL+uR );
            SurfGradientsX[edgeIDgrad+ngl]      =  nx * scaling*geomFace*  half*(vL+vR );

            SurfGradientsY[edgeIDgrad]          =  ny * scaling*geomFace*  half*(uL+uR );
            SurfGradientsY[edgeIDgrad+ngl]      =  ny * scaling*geomFace*  half*(vL+vR );



        }
    }


}
}

}
