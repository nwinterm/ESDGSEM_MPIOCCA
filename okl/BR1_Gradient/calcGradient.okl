


kernel void calcGradient(const int Nelem, const dfloat * Jac,const dfloat * Y_xi,const dfloat * Y_eta,const dfloat * X_xi,const dfloat * X_eta,const dfloat * Q,const dfloat * B,const dfloat * restrict D,dfloat * qGradientX,dfloat * qGradientY)
{



    for(int ie = 0; ie < Nelem; ie++; outer0)
    {



        shared dfloat s_D[ngl][ngl];
        shared dfloat s_Q1[ngl][ngl];
        shared dfloat s_Q2[ngl][ngl];
        shared dfloat s_Q3[ngl][ngl];







        for (int i=0; i<ngl; ++i;inner1){
            for (int j=0; j<ngl;++j;inner0){
                        const int id=j*ngl+i;
                        const int Fid = ie*ngl2*Neq   +j*ngl+i;
                        const int Xid = ie*ngl2       +j*ngl+i;

                        s_D[i][j]=D[id];


                        dfloat Qinv;
                        if (Q[Fid]>=PosPresTOL){
                            Qinv =  1.f/Q[Fid];
                        }else{
                            Qinv = 0.0;
                        }




                            s_Q1[i][j]= 0.0;
                            s_Q2[i][j]= Q[Fid+ngl2]*Qinv;
                            s_Q3[i][j]= Q[Fid+ngl2+ngl2]*Qinv;






            }
        }

            barrier(localMemFence);



            for (int j=0; j<ngl; ++j;inner1){
                for (int i=0; i<ngl;++i;inner0){

                    const int xid=ie*ngl2   +j*ngl+i;

                    dfloat h_xi=0.0;
                    dfloat h_eta=0.0;
                    dfloat hu_xi=0.0;
                    dfloat hu_eta=0.0;
                    dfloat hv_xi=0.0;
                    dfloat hv_eta=0.0;

                    const dfloat r_Yeta=Y_eta[xid];
                    const dfloat r_Yxi=Y_xi[xid];
                    const dfloat r_Xeta=X_eta[xid];
                    const dfloat r_Xxi=X_xi[xid];

	// unroll loop
                    occaUnroll(ngl)
                    for (int l=0; l<ngl; ++l){

                          h_xi+= s_D[l][i] * s_Q1[l][j];
                          h_eta+= s_D[l][j] * s_Q1[i][l];

                          hu_xi+= s_D[l][i] * s_Q2[l][j];
                          hu_eta+= s_D[l][j] * s_Q2[i][l];

                          hv_xi+= s_D[l][i] * s_Q3[l][j];
                          hv_eta+= s_D[l][j] * s_Q3[i][l];


                     }




                        const int id  = ie*ngl2*Neq   +j*ngl+i;


                        const dfloat r_Jac=Jac[xid];


                        dfloat h_x  = r_Yeta * h_xi - r_Yxi * h_eta;
                        dfloat hu_x = r_Yeta * hu_xi - r_Yxi * hu_eta;
                        dfloat hv_x = r_Yeta * hv_xi - r_Yxi * hv_eta;

                        dfloat h_y  = - r_Xeta * h_xi + r_Xxi * h_eta;
                        dfloat hu_y = - r_Xeta * hu_xi + r_Xxi * hu_eta;
                        dfloat hv_y = - r_Xeta * hv_xi + r_Xxi * hv_eta;



                        qGradientX[id]              =   r_Jac *h_x;
                        qGradientX[id+ngl2]         =   r_Jac *hu_x ;
                        qGradientX[id+ngl2+ngl2]    =   r_Jac *hv_x ;
                        qGradientY[id]              =   r_Jac *h_y;
                        qGradientY[id+ngl2]         =   r_Jac *hu_y ;
                        qGradientY[id+ngl2+ngl2]    =   r_Jac *hv_y ;

                }
            }



    }



}
