

kernel void calcGradient(const int Nelem,
                         const dfloat * restrict  Jac,
                         const dfloat * restrict  Y_xi,
                         const dfloat * restrict  Y_eta,
                         const dfloat * restrict  X_xi,
                         const dfloat * restrict  X_eta,
                         const dfloat * restrict  Q,
                         const dfloat * restrict  B,
                         const dfloat * restrict D,
                         dfloat * restrict  qGradientX,
                         dfloat * restrict  qGradientY)
{



    for(int iEo = 0; iEo < Nelem; iEo+=NEpad; outer0)
    {

        shared dfloat s_D[ngl][ngl+nglPad];
        shared dfloat s_u[NEpad][ngl][ngl+nglPad];
        shared dfloat s_v[NEpad][ngl][ngl+nglPad];

        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {

        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {

                const int id=j*ngl+i;
                const int Fid = eleID*ngl2*Neq   +j*ngl+i;

                s_D[i][j]=D[id];


                dfloat Qinv;
		const dfloat r_h = Q[Fid];
		
                if (r_h>PosPresTOL)
                {
                    Qinv =  one/r_h;
                }
                else
                {
                    Qinv = zero;
                }


                s_u[ieLoc][i][j]= Q[Fid+ngl2]*Qinv;
                s_v[ieLoc][i][j]= Q[Fid+ngl2+ngl2]*Qinv;



		}
}


            }
        }

        barrier(localMemFence);



        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {

        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {

                const int xid=eleID     *ngl2   +j*ngl+i;

                dfloat u_xi=zero;
                dfloat u_eta=zero;
                dfloat v_xi=zero;
                dfloat v_eta=zero;

                const dfloat r_Yeta=Y_eta[xid];
                const dfloat r_Yxi=Y_xi[xid];
                const dfloat r_Xeta=X_eta[xid];
                const dfloat r_Xxi=X_xi[xid];

                // unroll loop
                occaUnroll(ngl)
                for (int l=0; l<ngl; ++l)
                {


                    u_xi+= s_D[l][i] * s_u[ieLoc][l][j];
                    u_eta+= s_D[l][j] * s_u[ieLoc][i][l];

                    v_xi+= s_D[l][i] * s_v[ieLoc][l][j];
                    v_eta+= s_D[l][j] * s_v[ieLoc][i][l];


                }




                const int id  = eleID*ngl2*(Neq-1)   +j*ngl+i;


                const dfloat r_Jac=Jac[xid];


                dfloat u_x = r_Yeta * u_xi - r_Yxi * u_eta;
                dfloat v_x = r_Yeta * v_xi - r_Yxi * v_eta;

                dfloat u_y = - r_Xeta * u_xi + r_Xxi * u_eta;
                dfloat v_y = - r_Xeta * v_xi + r_Xxi * v_eta;



 
                qGradientX[id]         =   r_Jac *u_x ;
                qGradientX[id+ngl2]    =   r_Jac *v_x ;
                qGradientY[id]         =   r_Jac *u_y ;
                qGradientY[id+ngl2]    =   r_Jac *v_y ;

            }
        }

}}

    }



}
