
//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.


kernel void CollectEdgeDataGradient(const int Nfaces,
                                    const int * restrict  EdgeData,
                                    const dfloat * restrict  qGradientX,
                                    const dfloat * restrict  qGradientY,
                                    const dfloat * restrict  ViscPara,
                                    dfloat * restrict  ViscParaL,
                                    dfloat * restrict  ViscParaR,
                                    dfloat * restrict  qGradientXL,
                                    dfloat * restrict  qGradientXR,
                                    dfloat * restrict  qGradientYL,
                                    dfloat * restrict  qGradientYR)
{
    for (int ifa=0; ifa<Nfaces; ifa++; outer0)
    {


        for(int i=0; i<ngl; i++; inner0)
        {
            const int iel           =EdgeData[8*ifa];       //left element
            const int ier           =EdgeData[8*ifa+1];       //right element
            const int isl           =EdgeData[8*ifa+2];       //side within left element
            const int isr           =EdgeData[8*ifa+3];      //side within right element
            const int ireversed     =EdgeData[8*ifa+4];           //is order reversed? 0=yes, 1=no
            const int cpuL          =EdgeData[8*ifa+5];     // rank of cpuL
            const int cpuR          =EdgeData[8*ifa+6];     // rank of cpuR
            int increment;
            int idL,idR;

            const int edgeID=ifa*ngl*(Neq-1) + i;   //for edge wise solution


            if (ireversed==0)
            {
                increment = (ngl-1)-i;
            }
            else
            {
                increment=i;
            }


            dfloat qNodalXL[Neq-1];
            dfloat qNodalXR[Neq-1];
            dfloat qNodalYL[Neq-1];
            dfloat qNodalYR[Neq-1];
            if (i==0)
            {
                ViscParaL[ifa]=zero;
                ViscParaR[ifa]=zero;
            }

            if (procID == cpuL)
            {
                switch(isl)
                {
                case (0): //bottom side
                    idL = iel*ngl2*(Neq-1)+i;
                    break;
                case (2): //top side
                    idL = iel*ngl2*(Neq-1)+ngl2-ngl+i;

                    break;
                case (3): //left side
                    idL = iel*ngl2*(Neq-1)+i*ngl;

                    break;
                case (1): //right side
                    idL = iel*ngl2*(Neq-1)+(i+1)*ngl-1;

                    break;

                }

                qNodalXL[0]=qGradientX[idL];
                qNodalXL[1]=qGradientX[idL+ngl2];
                qNodalYL[0]=qGradientY[idL];
                qNodalYL[1]=qGradientY[idL+ngl2];

                if (i==0)
                {
                    ViscParaL[ifa]=ViscPara[iel];
                }

            }


            if (procID == cpuR)
            {
                switch(isr)
                {
                case (0): //bottom side
                    idR = ier*ngl2*(Neq-1)+increment;

                    break;
                case (2): //top side
                    idR = ier*ngl2*(Neq-1)+ngl2-ngl+increment;

                    break;
                case (3): //left side
                    idR = ier*ngl2*(Neq-1)+increment*ngl;

                    break;
                case (1): //right side
                    idR = ier*ngl2*(Neq-1)+(increment+1)*ngl-1;

                    break;

                }

                qNodalXR[0]=qGradientX[idR];
                qNodalXR[1]=qGradientX[idR+ngl2];

                qNodalYR[0]=qGradientY[idR];
                qNodalYR[1]=qGradientY[idR+ngl2];

                if (i==0)
                {
                    ViscParaR[ifa]=ViscPara[ier];
                }
            }




// EXTERIOR BOUNDARY?
            if (cpuL==-1)
            {
                if (i==0)
                {
                    ViscParaL[ifa]=ViscPara[ier];
                    ViscParaR[ifa]=ViscPara[ier];
                }
		qNodalXL[0]=zero;
		qNodalXL[1]=zero;

            }


            if (cpuR==-1)
            {
                if (i==0)
                {
                    ViscParaL[ifa]=ViscPara[iel];
                    ViscParaR[ifa]=ViscPara[iel];
                }
		qNodalXL[0]=zero;
		qNodalXL[1]=zero;

            }


            qGradientXL[edgeID]=qNodalXL[0];
            qGradientXL[edgeID+ngl]=qNodalXL[1];


            qGradientXR[edgeID]=qNodalXR[0];
            qGradientXR[edgeID+ngl]=qNodalXR[1];



            qGradientYL[edgeID]=qNodalYL[0];
            qGradientYL[edgeID+ngl]=qNodalYL[1];


            qGradientYR[edgeID]=qNodalYR[0];
            qGradientYR[edgeID+ngl]=qNodalYR[1];



        }//inner0 loop




    }//outer0 loop


}//end kernel
