kernel void UpdateKernel(const int Nelem,const dfloat RKCoeffA,const dfloat RKCoeffB,const dfloat RKCoeffC,const dfloat dt,const dfloat * Qt,const dfloat * qTmp, dfloat * q)
{


    for(int ie = 0; ie < Nelem; ie++; outer0)
    {

        shared dfloat s_Qt1[ngl2];
        shared dfloat s_Qt2[ngl2];
        shared dfloat s_Qt3[ngl2];
        shared dfloat s_Q1[ngl2];
        shared dfloat s_Q2[ngl2];
        shared dfloat s_Q3[ngl2];
        shared dfloat s_qTmp1[ngl2];
        shared dfloat s_qTmp2[ngl2];
        shared dfloat s_qTmp3[ngl2];


            for (int i=0; i<ngl; ++i;inner1){
                for (int j=0; j<ngl;++j;inner0){
                        int id=j*ngl+i;
                        int Fid = ie*ngl2*Neq   +j*ngl+i;
                        s_Qt1[id]  = Qt[Fid];
                        s_Qt2[id]  = Qt[Fid+ngl2];
                        s_Qt3[id]  = Qt[Fid+ngl2+ngl2];
                        s_Q1[id]    = q[Fid];
                        s_Q2[id]    = q[Fid+ngl2];
                        s_Q3[id]    = q[Fid+ngl2+ngl2];
                        s_qTmp1[id] = qTmp[Fid];
                        s_qTmp2[id] = qTmp[Fid+ngl2];
                        s_qTmp3[id] = qTmp[Fid+ngl2+ngl2];


                    }
                }

            barrier(localMemFence);


        for (int i=0; i<ngl; ++i;inner1){
            for (int j=0; j<ngl;++j;inner0){
                int id = ie*ngl2*Neq   +j*ngl+i;
                int idLoc = j*ngl+i;
                q[id]          = RKCoeffA*s_qTmp1[idLoc] + RKCoeffB * s_Q1[idLoc] + RKCoeffC*dt*s_Qt1[idLoc] ;
                q[id+ngl2]     = RKCoeffA*s_qTmp2[idLoc] + RKCoeffB * s_Q2[idLoc] + RKCoeffC*dt*s_Qt2[idLoc] ;
                q[id+ngl2+ngl2]= RKCoeffA*s_qTmp3[idLoc] + RKCoeffB * s_Q3[idLoc] + RKCoeffC*dt*s_Qt3[idLoc] ;
            }
          }



    }



}
