//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.



kernel void UpdateKernel(const int Nelem,
                         const dfloat RKCoeffA,
                         const dfloat RKCoeffB,
                         const dfloat RKCoeffC,
                         const dfloat dt,
                         const dfloat * restrict  Qt,
                         const dfloat * restrict  qTmp,
                         dfloat * restrict  q)
{


    for(int iEo = 0; iEo < Nelem; iEo+=NEpad; outer0)
    {


        shared dfloat s_Qt1[NEpad][ngl][ngl];
        shared dfloat s_Qt2[NEpad][ngl][ngl];
        shared dfloat s_Qt3[NEpad][ngl][ngl];
        shared dfloat s_Q1[NEpad][ngl][ngl];
        shared dfloat s_Q2[NEpad][ngl][ngl];
        shared dfloat s_Q3[NEpad][ngl][ngl];
        shared dfloat s_qTmp1[NEpad][ngl][ngl];
        shared dfloat s_qTmp2[NEpad][ngl][ngl];
        shared dfloat s_qTmp3[NEpad][ngl][ngl];

        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {




                        const int Fid = eleID*ngl2*Neq   +i*ngl+j;
                        s_Qt1[ieLoc][i][j]   = Qt[Fid];
                        s_Qt2[ieLoc][i][j]   = Qt[Fid+ngl2];
                        s_Qt3[ieLoc][i][j]   = Qt[Fid+ngl2+ngl2];
                        s_Q1[ieLoc][i][j]    = q[Fid];
                        s_Q2[ieLoc][i][j]    = q[Fid+ngl2];
                        s_Q3[ieLoc][i][j]    = q[Fid+ngl2+ngl2];
                        s_qTmp1[ieLoc][i][j] = qTmp[Fid];
                        s_qTmp2[ieLoc][i][j] = qTmp[Fid+ngl2];
                        s_qTmp3[ieLoc][i][j] = qTmp[Fid+ngl2+ngl2];



                    }
                }
            }
        }
        barrier(localMemFence);


        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {
                        const int id = eleID*ngl2*Neq   +i*ngl+j;
                        q[id]          = RKCoeffA*s_qTmp1[ieLoc][i][j] + RKCoeffB * s_Q1[ieLoc][i][j] + RKCoeffC*dt*s_Qt1[ieLoc][i][j] ;
                        q[id+ngl2]     = RKCoeffA*s_qTmp2[ieLoc][i][j] + RKCoeffB * s_Q2[ieLoc][i][j] + RKCoeffC*dt*s_Qt2[ieLoc][i][j] ;
                        q[id+ngl2+ngl2]= RKCoeffA*s_qTmp3[ieLoc][i][j] + RKCoeffB * s_Q3[ieLoc][i][j] + RKCoeffC*dt*s_Qt3[ieLoc][i][j] ;
                    }
                }


            }
        }



    }
}
