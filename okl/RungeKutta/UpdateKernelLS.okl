kernel void UpdateKernel(const int Nelem,
                         const dfloat RKCoeff,
                         const dfloat dt,
                         const dfloat * restrict gRK,
                         dfloat * restrict  q)
{


    for(int iEo = 0; iEo < Nelem; iEo+=NEpad; outer0)
    {

        shared dfloat s_gRK1[NEpad][ngl][ngl];
        shared dfloat s_gRK2[NEpad][ngl][ngl];
        shared dfloat s_gRK3[NEpad][ngl][ngl];


        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {
                        const int Fid = eleID*ngl2*Neq   +i*ngl+j;
                        s_gRK1[ieLoc][i][j] = gRK[Fid];
                        s_gRK2[ieLoc][i][j] = gRK[Fid+ngl2];
                        s_gRK3[ieLoc][i][j] = gRK[Fid+ngl2+ngl2];


                    }
                }
            }
        }

        barrier(localMemFence);


        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {
                        const int id = eleID*ngl2*Neq   +i*ngl+j;

                        q[id]          += RKCoeff*dt*s_gRK1[ieLoc][i][j] ;
                        q[id+ngl2]     += RKCoeff*dt*s_gRK2[ieLoc][i][j] ;
                        q[id+ngl2+ngl2]+= RKCoeff*dt*s_gRK3[ieLoc][i][j] ;
                    }
                }
            }
        }



    }
}
