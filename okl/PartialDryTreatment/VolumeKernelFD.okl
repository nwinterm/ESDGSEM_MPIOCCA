kernel void VolumeKernelPartialDry(const int Nelem,
                           const dfloat * restrict  Jac,
                           const dfloat * restrict  Y_xi,
                           const dfloat * restrict  Y_eta,
                           const dfloat * restrict  X_xi,
                           const dfloat * restrict  X_eta,
                           const dfloat * restrict  Q,
                           const int * restrict isPartlyDry,
                           const dfloat * restrict DcentralFD,
                           const dfloat * restrict DupwindFD,
                           const dfloat * restrict DdownwindFD,
                           const dfloat * restrict  B,
                           dfloat * restrict  Qt)
{



    for(int iEo = 0; iEo < Nelem; iEo+=NEpad; outer0)
    {
        shared dfloat s_Q1[NEpad][ngl][ngl+nglPad];
        shared dfloat s_B[NEpad][ngl][ngl+nglPad];

        shared dfloat s_F2_2[NEpad][ngl][ngl+nglPad];
        shared dfloat s_G3_2[NEpad][ngl][ngl+nglPad];

        shared dfloat s_F2_BD[NEpad][ngl][ngl+nglPad];
        shared dfloat s_G3_BD[NEpad][ngl][ngl+nglPad];

        shared dfloat s_DupwindFD[ngl][ngl+nglPad];
        shared dfloat s_DdownwindFD[ngl][ngl+nglPad];
        shared dfloat s_DcentralFD[ngl][ngl+nglPad];


        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {

                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {
                        const int id=i*ngl+j;
                        if(ieLoc==0)
                        {
                            s_DcentralFD[i][j]=DcentralFD[id];
                            s_DupwindFD[i][j]=DupwindFD[id];
                            s_DdownwindFD[i][j]=DdownwindFD[id];
                        }
                        if (isPartlyDry[eleID]==1)
                        {
                            const int xid=eleID*ngl2   +i*ngl+j;
                            const int Fid  = eleID*ngl2*Neq   +i*ngl+j;


                            s_Q1[ieLoc][i][j] = Q[Fid];
                            s_B[ieLoc][i][j] = B[xid];
                            const dfloat r_b = s_B[ieLoc][i][j];

                            dfloat r_invQ1=zero;
                            dfloat r_h=s_Q1[ieLoc][i][j];
                            dfloat r_H= r_h+r_b;



                            const dfloat F2_BD =  half_g*r_h*r_h;
                            const dfloat F2_2 =  g_const*r_h;
                            const dfloat G3_BD =  half_g*r_h*r_h;
                            const dfloat G3_2 =  g_const*r_h;


                            s_F2_2[ieLoc][i][j]=F2_2;
                            s_G3_2[ieLoc][i][j]=  G3_2;
                            s_F2_BD[ieLoc][i][j]=F2_BD;
                            s_G3_BD[ieLoc][i][j]=G3_BD;


                        }// is  partly dry?
                    }

                }
            }
        }

        barrier(localMemFence);

        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {

                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {
                        if (isPartlyDry[eleID]==1)
                        {
                            dfloat FxiDeriv2_2=zero;
                            dfloat FetaDeriv2_2=zero;
                            dfloat GxiDeriv3_2=zero;
                            dfloat GetaDeriv3_2=zero;
                            dfloat FxiDeriv2=zero;
                            dfloat FetaDeriv2=zero;
                            dfloat GxiDeriv3=zero;
                            dfloat GetaDeriv3=zero;

                            dfloat BxiDeriv=zero;
                            dfloat BetaDeriv=zero;

                            const dfloat r_h = s_Q1[ieLoc][i][j];
                            const dfloat r_b = s_B[ieLoc][i][j];
                            const dfloat r_H = r_h+r_b;
                            dfloat r_h_xp1 = zero ;
                            dfloat r_h_yp1 = zero;
                            dfloat r_h_xm1 = zero;
                            dfloat r_h_ym1 = zero;


                            if (i>0)
                            {
                                r_h_ym1 = s_Q1[ieLoc][i-1][j];
                            }
                            if (i<ngl-1)
                            {
                                r_h_yp1 = s_Q1[ieLoc][i+1][j];
                            }

                            if (j>0)
                            {
                                r_h_xm1 = s_Q1[ieLoc][i][j-1];
                            }
                            if (j<ngl-1)
                            {
                                r_h_xp1 = s_Q1[ieLoc][i][j+1];
                            }



                            if(r_h > PosPresTOL){

                            if (j==0)
                            {
                                if (r_h_xp1 > PosPresTOL)
                                {
                                    const dfloat r_Dp1 = s_DupwindFD[j][1];
                                    const dfloat r_D = s_DupwindFD[j][0];

                                    FxiDeriv2_2 = r_D* s_F2_2[ieLoc][i][j] + r_Dp1* s_F2_2[ieLoc][i][j+1]  ;
                                    GxiDeriv3_2 = r_D* s_G3_2[ieLoc][i][j] + r_Dp1* s_G3_2[ieLoc][i][j+1]  ;
                                    BxiDeriv = r_D* r_b + r_Dp1* s_B[ieLoc][i][j+1]  ;

                                }
                            }
                            if (j==ngl-1)
                            {
                                if (r_h_xm1 > PosPresTOL)
                                {
                                    const dfloat r_D = s_DdownwindFD[j][ngl-1];
                                    const dfloat r_Dm1 = s_DdownwindFD[j][ngl-2];

                                    FxiDeriv2_2 = r_Dm1* s_F2_2[ieLoc][i][j-1] + r_D* s_F2_2[ieLoc][i][j]  ;
                                    GxiDeriv3_2 = r_Dm1* s_G3_2[ieLoc][i][j-1] + r_D* s_G3_2[ieLoc][i][j]  ;
                                    BxiDeriv = r_Dm1* s_B[ieLoc][i][j-1] + r_D* r_b  ;

                                }
                            }
                            if ((j>0) && (j<ngl-1))
                            {
                                if (r_h_xp1 > PosPresTOL)
                                {
                                    if (r_h_xm1 > PosPresTOL)
                                    {
                                        const dfloat r_Dp1 = s_DcentralFD[j][j+1];
                                        const dfloat r_Dm1 = s_DcentralFD[j][j-1];
                                        FxiDeriv2_2 = r_Dm1* s_F2_2[ieLoc][i][j-1] + r_Dp1* s_F2_2[ieLoc][i][j+1]  ;
                                        GxiDeriv3_2 = r_Dm1* s_G3_2[ieLoc][i][j-1] + r_Dp1* s_G3_2[ieLoc][i][j+1]  ;
                                        BxiDeriv = r_Dm1* s_B[ieLoc][i][j-1] + r_Dp1* s_B[ieLoc][i][j+1]  ;



                                    }
                                    else
                                    {
                                        const dfloat r_Dp1 = s_DupwindFD[j][j+1];
                                        const dfloat r_D = s_DupwindFD[j][j];
                                        FxiDeriv2_2 = r_D* s_F2_2[ieLoc][i][j] + r_Dp1* s_F2_2[ieLoc][i][j+1] ;
                                        GxiDeriv3_2 = r_D* s_G3_2[ieLoc][i][j] + r_Dp1* s_G3_2[ieLoc][i][j+1]  ;
                                        BxiDeriv = r_D* r_b + r_Dp1* s_B[ieLoc][i][j+1]  ;
                                    }

                                }
                                else
                                {
                                    if (r_h_xm1 > PosPresTOL)
                                    {
                                        const dfloat r_D = s_DdownwindFD[j][j];
                                        const dfloat r_Dm1 = s_DdownwindFD[j][j-1];
                                        FxiDeriv2_2 = r_Dm1* s_F2_2[ieLoc][i][j-1] + r_D* s_F2_2[ieLoc][i][j]  ;
                                        GxiDeriv3_2 = r_Dm1* s_G3_2[ieLoc][i][j-1] + r_D* s_G3_2[ieLoc][i][j]  ;

                                        BxiDeriv = r_Dm1* s_B[ieLoc][i][j-1] + r_D* r_b  ;
                                    }

                                }
                            }

                            if (i==0)
                            {
                                if (r_h_yp1 > PosPresTOL)
                                {
                                    const dfloat r_Dp1 = s_DupwindFD[i][1];
                                    const dfloat r_D = s_DupwindFD[i][0];


                                    FetaDeriv2_2 = r_D* s_F2_2[ieLoc][i][j] + r_Dp1* s_F2_2[ieLoc][i+1][j]  ;
                                    GetaDeriv3_2 = r_D* s_G3_2[ieLoc][i][j] + r_Dp1* s_G3_2[ieLoc][i+1][j]  ;

                                    BetaDeriv = r_D* r_b + r_Dp1* s_B[ieLoc][i+1][j]  ;

                                }
                            }
                            if (i==ngl-1)
                            {
                                if (r_h_ym1 > PosPresTOL)
                                {
                                    const dfloat r_D = s_DdownwindFD[i][ngl-1];
                                    const dfloat r_Dm1 = s_DdownwindFD[i][ngl-2];

                                    FetaDeriv2_2 = r_Dm1* s_F2_2[ieLoc][i-1][j] + r_D* s_F2_2[ieLoc][i][j]  ;
                                    GetaDeriv3_2 = r_Dm1* s_G3_2[ieLoc][i-1][j] + r_D* s_G3_2[ieLoc][i][j]  ;
                                    BetaDeriv = r_Dm1* s_B[ieLoc][i-1][j] + r_D* r_b  ;

                                }
                            }
                            if ((i>0) && (i<ngl-1))
                            {
                                if (r_h_yp1 > PosPresTOL)
                                {
                                    if (r_h_ym1 > PosPresTOL)
                                    {
                                        const dfloat r_Dp1 = s_DcentralFD[i][i+1];
                                        const dfloat r_Dm1 = s_DcentralFD[i][i-1];

                                        FetaDeriv2_2 = r_Dm1* s_F2_2[ieLoc][i-1][j] + r_Dp1* s_F2_2[ieLoc][i+1][j]  ;
                                        GetaDeriv3_2 = r_Dm1* s_G3_2[ieLoc][i-1][j] + r_Dp1* s_G3_2[ieLoc][i+1][j]  ;
                                        BetaDeriv = r_Dm1* s_B[ieLoc][i-1][j] + r_Dp1* s_B[ieLoc][i+1][j]  ;

                                    }
                                    else
                                    {
                                        const dfloat r_Dp1 = s_DupwindFD[i][i+1];
                                        const dfloat r_D = s_DupwindFD[i][i];

                                        FetaDeriv2_2 = r_D* s_F2_2[ieLoc][i][j] + r_Dp1* s_F2_2[ieLoc][i+1][j]  ;
                                        GetaDeriv3_2 = r_D* s_G3_2[ieLoc][i][j] + r_Dp1* s_G3_2[ieLoc][i+1][j]  ;
                                        BetaDeriv = r_D* r_b + r_Dp1* s_B[ieLoc][i+1][j]  ;
                                    }

                                }
                                else
                                {
                                    if (r_h_ym1 > PosPresTOL)
                                    {
                                        const dfloat r_D = s_DdownwindFD[i][i];
                                        const dfloat r_Dm1 = s_DdownwindFD[i][i-1];

                                        FetaDeriv2_2 = r_Dm1* s_F2_2[ieLoc][i-1][j] + r_D* s_F2_2[ieLoc][i][j]  ;
                                        GetaDeriv3_2 = r_Dm1* s_G3_2[ieLoc][i-1][j] + r_D* s_G3_2[ieLoc][i][j]  ;
                                        BetaDeriv = r_Dm1* s_B[ieLoc][i-1][j] + r_D* r_b  ;

                                    }

                                }

                            }

                            } // end of r_h> PosPresTOL
                            if (j==0)
                            {
                                FxiDeriv2 += geomFace *  s_F2_BD[ieLoc][i][j];
                                GxiDeriv3 += geomFace *  s_G3_BD[ieLoc][i][j];
                            }
                            if (j==ngl-1)
                            {
                                FxiDeriv2 += -geomFace *  s_F2_BD[ieLoc][i][j];
                                GxiDeriv3 += -geomFace *  s_G3_BD[ieLoc][i][j];

                            }
                            if (i==0)
                            {
                                FetaDeriv2 += geomFace *  s_F2_BD[ieLoc][i][j];
                                GetaDeriv3 += geomFace *  s_G3_BD[ieLoc][i][j];
                            }
                            if (i==ngl-1)
                            {
                                FetaDeriv2 += -geomFace *  s_F2_BD[ieLoc][i][j];
                                GetaDeriv3 += -geomFace *  s_G3_BD[ieLoc][i][j];
                            }

                            const int xid=eleID*ngl2   +i*ngl+j;

                            const dfloat r_Yeta=Y_eta[xid];
                            const dfloat r_Yxi=Y_xi[xid];
                            const dfloat r_Xeta=X_eta[xid];
                            const dfloat r_Xxi=X_xi[xid];

                            const dfloat FxDeriv2= r_Yeta * FxiDeriv2 - r_Yxi* FetaDeriv2_2 ;
                            const dfloat FxDeriv2_2= r_h * ( r_Yeta * FxiDeriv2_2 - r_Yxi* FetaDeriv2_2 );

                            const dfloat GyDeriv3=  -r_Xeta * GxiDeriv3 + r_Xxi* GetaDeriv3 ;
                            const dfloat GyDeriv3_2= r_h* ( -r_Xeta * GxiDeriv3_2 + r_Xxi* GetaDeriv3_2 );

                            const dfloat BxDeriv = r_Yeta*BxiDeriv - r_Yxi * BetaDeriv;
                            const dfloat ByDeriv = -r_Xeta*BxiDeriv + r_Xxi * BetaDeriv;

                            const dfloat FluxDeriv2=  FxDeriv2_2 + FxDeriv2;
                            const dfloat FluxDeriv3=  GyDeriv3_2 + GyDeriv3;



                            const int id  = eleID*ngl2*Neq   +i*ngl+j;

                            const dfloat r_Jac=Jac[xid];

                            Qt[id+ngl2]        =  - r_Jac *FluxDeriv2 - g_const*r_Jac *r_h*BxDeriv ;
                            Qt[id+ngl2+ngl2]   =  - r_Jac *FluxDeriv3 - g_const*r_Jac *r_h*ByDeriv;





                        } // is  partly dry?



                    }

                }
            }
        }
    }


}





