//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.


kernel void MemCopyComparison(const int Nelem,
                                 const dfloat * restrict Qin,
                                 dfloat * restrict Qout)
{


    for(int iEo = 0; iEo < Nelem; iEo+=NEpad; outer0)
    {

        shared dfloat s_Q1[NEpad][ngl][ngl];
        shared dfloat s_Q2[NEpad][ngl][ngl];
        shared dfloat s_Q3[NEpad][ngl][ngl];


        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {
                        const int Fid       =   eleID*ngl2*Neq   +i*ngl+j;

                            s_Q1[ieLoc][i][j]      =   Qin[Fid];
                            s_Q2[ieLoc][i][j]      =   Qin[Fid+ngl2];
                            s_Q3[ieLoc][i][j]      =   Qin[Fid+ngl2+ngl2];


                    }

                }
            }
        }

        barrier(localMemFence);

        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {

                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {

                        const int id  = eleID*ngl2*Neq   +i*ngl+j;

                        Qout[id]              =  s_Q1[ieLoc][i][j];
                        Qout[id+ngl2]         =  s_Q2[ieLoc][i][j] ;
                        Qout[id+ngl2+ngl2]    =  s_Q3[ieLoc][i][j];

                    }




                }
            }
        }


    }



}

