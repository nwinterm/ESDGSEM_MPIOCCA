
kernel void VolumeKernelFluxDiff(const int Nelem, const dfloat * Jac,const dfloat * Y_xi,const dfloat * Y_eta,const dfloat * X_xi,const dfloat * X_eta,const dfloat * Q,const dfloat * restrict D,const dfloat * Bx,const dfloat * By,dfloat * Qt)
{


    for(int ie = 0; ie < Nelem; ie++; outer0)
    {

        shared dfloat s_D[ngl][ngl];
        shared dfloat s_Q1[ngl][ngl];
        shared dfloat s_Q2[ngl][ngl];
        shared dfloat s_Q3[ngl][ngl];
        shared dfloat s_Yeta[ngl][ngl];
        shared dfloat s_Yxi[ngl][ngl];
        shared dfloat s_Xeta[ngl][ngl];
        shared dfloat s_Xxi[ngl][ngl];


            for (int i=0; i<ngl; ++i;inner1){
                for (int j=0; j<ngl;++j;inner0){
                        const int id=j*ngl+i;
                        const int xid=ie*ngl2   +j*ngl+i;
                        const int Fid = ie*ngl2*Neq   +j*ngl+i;

                        s_D[i][j]=D[id];
                        s_Q1[i][j]=Q[Fid];
                        s_Q2[i][j]=Q[Fid+ngl2];
                        s_Q3[i][j]=Q[Fid+ngl2+ngl2];
                        s_Yeta[i][j]=Y_eta[xid];
                        s_Yxi[i][j]=Y_xi[xid];
                        s_Xeta[i][j]=X_eta[xid];
                        s_Xxi[i][j]=X_xi[xid];

                    }
                }

            barrier(localMemFence);

            for (int j=0; j<ngl; ++j;inner1){
                for (int i=0; i<ngl;++i;inner0){

                dfloat FluxDeriv1=0.0;
                dfloat FluxDeriv2=0.0;
                dfloat FluxDeriv3=0.0;
                dfloat invQ1ij=0.0;
                dfloat H_ij=s_Q1[i][j];
                dfloat HU_ij= s_Q2[i][j];
                dfloat HV_ij= s_Q3[i][j];

                 if (H_ij>=PosPresTOL){
                    invQ1ij = 1.f/H_ij;
                 }else{
                    H_ij = 0.0;
                    invQ1ij = 0.0;
                    HU_ij = 0.0;
                    HV_ij = 0.0;
                 }

//				if (isinf(invQ1ij)){invQ1ij=0.0;}

                occaUnroll(ngl)
                for (int l=0; l<ngl; ++l){

                    dfloat H_lj=s_Q1[l][j];
                    dfloat invQ1lj=0.0;
                    dfloat HU_lj=s_Q2[l][j];
                    dfloat HV_lj=s_Q3[l][j];
                     if (H_lj>=PosPresTOL){
                        invQ1lj=1.f/H_lj;
                     }else{
                        H_lj = 0.0;
                        invQ1lj=0.0;
                        HU_lj=0.0;
                        HV_lj=0.0;
                     };
//					if (isinf(invQ1lj)){invQ1lj=0.0;}



                     const dfloat h_avg_xi = 0.5*(H_ij+H_lj) ;
                     const dfloat h2_avg_xi = 0.5*(H_ij*H_ij+H_lj*H_lj) ;
                     const dfloat hu_avg_xi = 0.5* (HU_ij+HU_lj) ;
                     const dfloat hv_avg_xi = 0.5* (HV_ij+HV_lj) ;
                     const dfloat u_avg_xi = 0.5* (HU_ij*invQ1ij+HU_lj*invQ1lj) ;
                     const dfloat v_avg_xi = 0.5* (HV_ij*invQ1ij+HV_lj*invQ1lj) ;

                     const dfloat Yeta_avg = 0.5*(s_Yeta[i][j]+s_Yeta[l][j]) ;
                     const dfloat Xeta_avg = 0.5*(s_Xeta[i][j]+s_Xeta[l][j]) ;

                     const dfloat F1vol = Yeta_avg * hu_avg_xi - Xeta_avg * hv_avg_xi;
                     const dfloat F2vol = Yeta_avg *(hu_avg_xi * u_avg_xi   + g_const * h_avg_xi*h_avg_xi- 0.5*g_const*h2_avg_xi) - Xeta_avg*hv_avg_xi * u_avg_xi;
                     const dfloat F3vol = Yeta_avg *(hu_avg_xi * v_avg_xi) - Xeta_avg*(hv_avg_xi*v_avg_xi + g_const * h_avg_xi*h_avg_xi - 0.5*g_const * h2_avg_xi);


                     dfloat H_il=s_Q1[i][l];
                     dfloat invQ1il=0.0;
                     dfloat HU_il=s_Q2[i][l];
                     dfloat HV_il=s_Q3[i][l];
                     if (H_il>=PosPresTOL){
                        invQ1il = 1.f/H_il;
                     }else{
                        H_il=0.0;
                        invQ1il = 0.0;
                        HU_il=0.0;
                        HV_il=0.0;
                     };
//					if (isinf(invQ1il)){invQ1il=0.0;}

                     const dfloat h_avg_eta = 0.5*(H_ij+H_il) ;
                     const dfloat h2_avg_eta = 0.5*(H_ij*H_ij+H_il*H_il) ;
                     const dfloat hu_avg_eta = 0.5* (HU_ij+HU_il);
                     const dfloat hv_avg_eta = 0.5* (HV_ij+HV_il);
                     const dfloat u_avg_eta = 0.5* (HU_ij*invQ1ij+HU_il*invQ1il) ;
                     const dfloat v_avg_eta = 0.5* (HV_ij*invQ1ij+HV_il*invQ1il) ;

                     const dfloat Yxi_avg = 0.5*(s_Yxi[i][j]+s_Yxi[i][l]) ;
                     const dfloat Xxi_avg = 0.5*(s_Xxi[i][j]+s_Xxi[i][l]) ;

                     const dfloat G1vol =-Yxi_avg * hu_avg_eta       + Xxi_avg*hv_avg_eta;
                     const dfloat G2vol =-Yxi_avg * (hu_avg_eta * u_avg_eta   + g_const * h_avg_eta*h_avg_eta- 0.5*g_const*h2_avg_eta) + Xxi_avg* hv_avg_eta * u_avg_eta;
                     const dfloat G3vol =-Yxi_avg *(hu_avg_eta * v_avg_eta) + Xxi_avg*(hv_avg_eta*v_avg_eta + g_const * h_avg_eta*h_avg_eta - 0.5*g_const * h2_avg_eta);


                      FluxDeriv1+= s_D[l][i] * F1vol ;
                      FluxDeriv1+= s_D[l][j] * G1vol ;



                      FluxDeriv2+=s_D[l][i] * F2vol ;
                      FluxDeriv2+=s_D[l][j] * G2vol ;




                      FluxDeriv3+=s_D[l][i] * F3vol ;
                      FluxDeriv3+=s_D[l][j] * G3vol ;





                 }

                    const int id  = ie*ngl2*Neq   +j*ngl+i;
                    const int xid=ie*ngl2   +j*ngl+i;
                        const dfloat r_Jac=Jac[xid];
                        const dfloat r_Bx=Bx[xid];
                        const dfloat r_By=By[xid];

                        Qt[id]              = -  r_Jac *FluxDeriv1;
                        Qt[id+ngl2]         = -  r_Jac *FluxDeriv2 - g_const *H_ij*r_Bx ;
                        Qt[id+ngl2+ngl2]    = -  r_Jac *FluxDeriv3 - g_const *H_ij*r_By;


                }
            }



    }



}
