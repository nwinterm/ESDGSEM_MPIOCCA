kernel void FindLambdaMax(const int Nelem,
                          const dfloat * restrict  Q,
                          dfloat * restrict  LambdaMax)
{



    for(int ie = 0; ie < Nelem; ie++; outer0)
    {


        shared dfloat s_MaxLambda[ngl][ngl];




        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {
                const int Fid = ie*ngl2*Neq   +j*ngl+i;

                const dfloat r_h = Q[Fid];
                dfloat Qinv;
                if (r_h>PosPresTOL)
                {
                    Qinv =  one/r_h;
                }
                else
                {
                    Qinv = zero;
                }
                const dfloat c=sqrt(g_const*Q[Fid]);

                const dfloat u =Q[Fid+ngl2]*Qinv;
                const dfloat v =Q[Fid+ngl2+ngl2]*Qinv;

                s_MaxLambda[i][j] =  c + max(fabs(u),fabs(v));


            }
        }

        barrier(localMemFence);



        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {
                if (i==0)
                {
                    if (j==0)
                    {
                        LambdaMax[ie]=zero;
                        occaUnroll(ngl)
                        for (int k=0; k<ngl; ++k)
                        {
                            occaUnroll(ngl)
                            for (int l=0; l<ngl; ++l)
                            {
                                LambdaMax[ie] = max(LambdaMax[ie], s_MaxLambda[l][k]);

                            }
                        }

                    }
                }




            }

        }



    }\\elem



}//kernel


