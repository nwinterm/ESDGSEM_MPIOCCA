kernel void VolumeKernelFluxDiff(int Nelem,
                                 dfloat * Jac,
                                 dfloat * Y_xi,
                                 dfloat * Y_eta,
                                 dfloat * X_xi,
                                 dfloat * X_eta,
                                 dfloat * Q,
                                 dfloat * D,
                                 dfloat * Bx,
                                 dfloat * By,
                                 dfloat * Qt)
{
    for(int ie = 0; ie < Nelem; ie++; outer0)
    {
        for (int j=0; j<ngl; ++j; inner1)
        {
            for (int i=0; i<ngl; ++i; inner0)
            {
				int ij = ie*ngl2*Neq   +j*ngl+i;
				int xij = ie*ngl2   +j*ngl+i;
                dfloat FluxDeriv1   =   zero;
                dfloat FluxDeriv2   =   zero;
                dfloat FluxDeriv3   =   zero;
				dfloat r_invQij;
					if (Q[ij]>=PosPresTOL)
					{
						r_invQij = one/Q[ij];
					}
					else
					{
						r_invQij =  zero;
					}
                for (int l=0; l<ngl; ++l)
                {
					int lj = ie*ngl2*Neq   +j*ngl+l;
					int xlj= ie*ngl2   +j*ngl+l;
					dfloat r_invQlj;
					if (Q[lj]>=PosPresTOL)
					{
						r_invQlj = one/Q[lj];
					}
					else
					{
						r_invQ lj=  zero;
					}
                    dfloat h_avg_xi = half*(Q[ij]+Q[lj]) ;
                    dfloat h2_avg_xi = half*(Q[ij]*Q[ij]+Q[lj]*Q[lj]) ;
                    dfloat hu_avg_xi = half* (Q[ij+ngl2]+Q[lj+ngl2]) ;
                    dfloat hv_avg_xi = half* (Q[ij+ngl2+ngl2]+Q[lj+ngl2+ngl2]) ;
                    dfloat u_avg_xi = half* (Q[ij+ngl2]*r_invQij+Q[lj+ngl2]*r_invQlj) ;
                    dfloat v_avg_xi = half* (Q[ij+ngl2+ngl2]*r_invQij+Q[lj+ngl2+ngl2]*r_invQlj) ;
                    dfloat Yeta_avg = half*(Y_eta[xij]+Y_eta[xlj]) ;
                    dfloat Xeta_avg = half*(X_eta[xij]+X_eta[xlj]) ;
                    dfloat F1vol = Yeta_avg * hu_avg_xi - Xeta_avg * hv_avg_xi;
                    dfloat F2vol = Yeta_avg *(hu_avg_xi * u_avg_xi   + g_const * h_avg_xi*h_avg_xi- half*g_const*h2_avg_xi) - Xeta_avg*hv_avg_xi * u_avg_xi;
                    dfloat F3vol = Yeta_avg *(hu_avg_xi * v_avg_xi) - Xeta_avg*(hv_avg_xi*v_avg_xi + g_const * h_avg_xi*h_avg_xi - half*g_const * h2_avg_xi);
					
					int il = ie*ngl2*Neq   +l*ngl+i;
					int xil = ie*ngl2   +l*ngl+i;
					dfloat r_invQil;
					if (Q[il]>=PosPresTOL)
					{
						r_invQil = one/Q[il];
					}
					else
					{
						r_invQil=  zero;
					}
                    dfloat h_avg_eta = half*(Q[ij]+Q[il]) ;
                    dfloat h2_avg_eta = half*(Q[ij]*Q[ij]+Q[il]*Q[il]) ;
                    dfloat hu_avg_eta = half* (Q[ij+ngl2]+Q[il+ngl2]);
                    dfloat hv_avg_eta = half* (Q[ij+ngl2+ngl2]+Q[il+ngl2+ngl2]);
                    dfloat u_avg_eta = half* (Q[ij+ngl2]*r_invQij+Q[il+ngl2]*r_invQil) ;
                    dfloat v_avg_eta = half* (Q[ij+ngl2+ngl2]*r_invQij+Q[il+ngl2+ngl2]*r_invQil) ;
                    dfloat Yxi_avg = half*(Y_xi[xij]+Y_xi[xil]) ;
                    dfloat Xxi_avg = half*(X_xi[xij]+X_xi[xil]) ;
                    dfloat G1vol =-Yxi_avg * hu_avg_eta       + Xxi_avg*hv_avg_eta;
                    dfloat G2vol =-Yxi_avg * (hu_avg_eta * u_avg_eta   + g_const * h_avg_eta*h_avg_eta- half*g_const*h2_avg_eta) + Xxi_avg* hv_avg_eta * u_avg_eta;
                    dfloat G3vol =-Yxi_avg *(hu_avg_eta * v_avg_eta) + Xxi_avg*(hv_avg_eta*v_avg_eta + g_const * h_avg_eta*h_avg_eta - half*g_const * h2_avg_eta);

                    FluxDeriv1+= D[i*ngl+l] * F1vol ;
                    FluxDeriv1+= D[j*ngl+l] * G1vol ;
                    FluxDeriv2+=D[i*ngl+l] * F2vol ;
                    FluxDeriv2+=D[j*ngl+l] * G2vol ;
                    FluxDeriv3+=D[i*ngl+l] * F3vol ;
                    FluxDeriv3+=D[j*ngl+l] * G3vol ;
                }
                dfloat r_Jac=Jac[xij];
                dfloat r_Bx=Bx[xij];
                dfloat r_By=By[xij];
                Qt[ij]              = -  r_Jac *FluxDeriv1;
                Qt[ij+ngl2]         = -  r_Jac *FluxDeriv2 - g_const *Q[ij]*r_Bx ;
                Qt[ij+ngl2+ngl2]    = -  r_Jac *FluxDeriv3 - g_const *Q[ij]*r_By;
            }
        }
    }
}
