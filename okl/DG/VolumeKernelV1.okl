kernel void VolumeKernel(int Nelem,
                         dfloat * Jac,
                         dfloat * Y_xi,
                         dfloat * Y_eta,
                         dfloat * X_xi,
                         dfloat * X_eta,
                         dfloat * Q,
                         dfloat * D,
                         dfloat * Bx,
                         dfloat * By,
                         dfloat * Qt)
{



    for(int ie = 0; ie < Nelem; ie++; outer0)
    {



        shared dfloat s_F1[ngl][ngl];
        shared dfloat s_F2[ngl][ngl];
        shared dfloat s_F3[ngl][ngl];
        shared dfloat s_G1[ngl][ngl];
        shared dfloat s_G2[ngl][ngl];
        shared dfloat s_G3[ngl][ngl];
        shared dfloat s_D[ngl][ngl];



        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {
                int id=j*ngl+i;

                s_D[i][j]=D[id];

            }
        }

        barrier(localMemFence);

        // calcFluxes
        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {

                int id=j*ngl+i;
				int Fid = ie*ngl2*Neq   +j*ngl+i;
                int xid=ie*ngl2   +j*ngl+i;
				

				dfloat r_h = Q[Fid];
				dfloat r_hu = Q[Fid+ngl2];
				dfloat r_hv = Q[Fid+ngl2+ngl2];



                dfloat F1 = r_hu;
                dfloat F2 = r_hu*r_hu*one/r_h + half*g_const*r_h*r_h;
                dfloat F3 = r_hu*r_hv*one/r_h;
                dfloat G1 = r_hv;
                dfloat G2 = r_hu*r_hv*one/r_h;
                dfloat G3 = r_hv*r_hv*one/r_h + half*g_const*r_h*r_h;

                dfloat r_Yeta=Y_eta[xid];
                dfloat r_Yxi=Y_xi[xid];
                dfloat r_Xeta=X_eta[xid];
                dfloat r_Xxi=X_xi[xid];


                s_F1[i][j]=r_Yeta * F1 - r_Xeta* G1;
                s_G1[i][j]=-r_Yxi * F1 + r_Xxi* G1;

                s_F2[i][j]=r_Yeta * F2 - r_Xeta* G2;
                s_G2[i][j]=-r_Yxi * F2 + r_Xxi* G2;

                s_F3[i][j]=r_Yeta * F3 - r_Xeta* G3;
                s_G3[i][j]=-r_Yxi * F3 + r_Xxi* G3;



            }
        }

        barrier(localMemFence);

        for (int j=0; j<ngl; ++j; inner1)
        {
            for (int i=0; i<ngl; ++i; inner0)
            {
                dfloat FluxDeriv1=zero;
                dfloat FluxDeriv2=zero;
                dfloat FluxDeriv3=zero;


                for (int l=0; l<ngl; ++l)
                {

                    FluxDeriv1+= s_D[l][i] * s_F1[l][j];
                    FluxDeriv1+= s_D[l][j] * s_G1[i][l];


                    FluxDeriv2+=s_D[l][i] * s_F2[l][j];
                    FluxDeriv2+=s_D[l][j] * s_G2[i][l];;



                    FluxDeriv3+=s_D[l][i] * s_F3[l][j];
                    FluxDeriv3+=s_D[l][j] * s_G3[i][l];


                }


                int id  = ie*ngl2*Neq   +j*ngl+i;
				int Fid = ie*ngl2*Neq   +j*ngl+i;
                int xid=ie*ngl2   +j*ngl+i;

                dfloat r_Jac=Jac[xid];
                dfloat r_Bx=Bx[xid];
                dfloat r_By=By[xid];
				dfloat r_h = Q[Fid];

                Qt[id]              = -  r_Jac *FluxDeriv1;
                Qt[id+ngl2]         = -  r_Jac *FluxDeriv2 - g_const *r_h*r_Bx ;
                Qt[id+ngl2+ngl2]    = -  r_Jac *FluxDeriv3 - g_const *r_h*r_By;




            }
        }



    }



}

