void Fvol(const dfloat q1L,const dfloat q2L,const dfloat q3L,const dfloat qInvL,
			const dfloat q1R,const dfloat q2R,const dfloat q3R,const dfloat qInvR,
			const dfloat YetaL,const dfloat YetaR,
			const dfloat XetaL,const dfloat XetaR,
            dfloat * F1,dfloat * F2,dfloat * F3
			)
{
		const dfloat h_A = fourth_g*(q1L+q1R)*(q1L+q1R) ;
		const dfloat h2_A = half*(q1L * q1L+q1R * q1R) ;
		const dfloat hu_A = half* (q2L+q2R) ;
		const dfloat hv_A = half* (q3L+q3R) ;
		const dfloat u_A = half* (q2L*qInvL+q2R*qInvR) ;
		const dfloat v_A = half* (q3L*qInvL+q3R*qInvR) ;
		const dfloat Yeta_A = half*(YetaL+YetaR) ;
		const dfloat Xeta_A= half*(XetaL+XetaR) ;
		*F1 = Yeta_A * hu_A - Xeta_A * hv_A;
		*F2 = Yeta_A *(hu_A * u_A   + h_A - half_g*h2_A) - Xeta_A*hv_A * u_A;
		*F3 = Yeta_A *(hu_A * v_A) - Xeta_A*(hv_A*v_A+ h_A - half_g * h2_A);
}
void Gvol(const dfloat q1L,const dfloat q2L,const dfloat q3L,const dfloat qInvL,
			const dfloat q1R,const dfloat q2R,const dfloat q3R,const dfloat qInvR,
            const dfloat YxiL,const dfloat YxiR,
            const dfloat XxiL,const dfloat XxiR,
            dfloat * G1,dfloat * G2,dfloat * G3
			)
{
			const dfloat h_A = fourth_g*(q1L+q1R)*(q1L+q1R) ;
			const dfloat h2_A = half*(q1L * q1L+q1R * q1R) ;
			const dfloat hu_A = half* (q2L+q2R) ;
			const dfloat hv_A = half* (q3L+q3R) ;
			const dfloat u_A = half* (q2L*qInvL+q2R*qInvR) ;
			const dfloat v_A = half* (q3L*qInvL+q3R*qInvR) ;
			const dfloat Yxi_A = half*(YxiL+YxiR) ;
			const dfloat Xxi_A = half*( XxiL+ XxiR) ;
			*G1 =-Yxi_A * hu_A   + Xxi_A*hv_A;
			*G2 =-Yxi_A * (hu_A * u_A   + h_A - half_g*h2_A) + Xxi_A* hv_A * u_A;
			*G3 =-Yxi_A *(hu_A * v_A) + Xxi_A*(hv_A*v_A +h_A - half_g * h2_A);
}

kernel void VolumeKernelFluxDiff(const int Nelem,
                                 const dfloat * restrict Jac,
                                 const dfloat * restrict Y_xi,
                                 const dfloat * restrict Y_eta,
                                 const dfloat * restrict X_xi,
                                 const dfloat * restrict X_eta,
                                 const dfloat * restrict Q,
                                 const dfloat * restrict D,
                                 const dfloat * restrict Bx,
                                 const dfloat * restrict By,
                                 dfloat * restrict Qt)
{


    for(int ie = 0; ie < Nelem; ie++; outer0)
    {

        shared dfloat s_D[ngl][ngl];
        shared dfloat s_Q1[ngl][ngl];
        shared dfloat s_Q2[ngl][ngl];
        shared dfloat s_Q3[ngl][ngl];
		shared dfloat s_invQ[ngl][ngl];
        shared dfloat s_Yeta[ngl][ngl];
        shared dfloat s_Yxi[ngl][ngl];
        shared dfloat s_Xeta[ngl][ngl];
        shared dfloat s_Xxi[ngl][ngl];

        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {
				const int id=j*ngl+i;
				const int xid=ie*ngl2   +j*ngl+i;
				const int Fid = ie*ngl2*Neq   +j*ngl+i;

                s_D[i][j]=D[id];
                s_Yeta[i][j]=Y_eta[xid];
                s_Yxi[i][j]=Y_xi[xid];
                s_Xeta[i][j]=X_eta[xid];
                s_Xxi[i][j]=X_xi[xid];

				const dfloat r_h = Q[Fid];
				s_Q1[i][j]=r_h;
				s_invQ[i][j] = one/r_h;
				s_Q2[i][j]=Q[Fid+ngl2];
				s_Q3[i][j]=Q[Fid+ngl2+ngl2];

            }
        }

        barrier(localMemFence);

        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {

						dfloat FluxDeriv1   =   zero;
						dfloat FluxDeriv2   =   zero;
						dfloat FluxDeriv3   =   zero;
						const dfloat H_ij         =   s_Q1[i][j];
						const dfloat invQ1ij      =   s_invQ[i][j];
						const dfloat HU_ij        =   s_Q2[i][j];
						const dfloat HV_ij        =   s_Q3[i][j];
						const dfloat r_Yeta_ij    =   s_Yeta[i][j];
                        const dfloat r_Xeta_ij    =   s_Xeta[i][j];
                        const dfloat r_Yxi_ij     =   s_Yxi[i][j];
                        const dfloat r_Xxi_ij     =   s_Xxi[i][j];


						for (int l=0; l<ngl; ++l)
						{

							const dfloat H_lj=s_Q1[l][j];
							const dfloat invQ1lj=s_invQ[l][j];
							const dfloat HU_lj=s_Q2[l][j];
							const dfloat HV_lj=s_Q3[l][j];
							
							dfloat F1vol=zero,F2vol=zero,F3vol=zero;
							Fvol(H_ij,HU_ij,HV_ij,invQ1ij,H_lj,HU_lj,HV_lj,invQ1lj,r_Yeta_ij,s_Yeta[i][l],r_Xeta_ij,s_Xeta[i][l],&F1vol,&F2vol,&F3vol);

							const dfloat H_il=s_Q1[i][l];
							const dfloat invQ1il=s_invQ[i][l];
							const dfloat HU_il=s_Q2[i][l];
							const dfloat HV_il=s_Q3[i][l];

							dfloat G1vol=zero,G2vol=zero,G3vol=zero;
							Gvol(H_ij,HU_ij,HV_ij,invQ1ij,H_il,HU_il,HV_il,invQ1il,r_Yxi_ij,s_Yxi[l][j],r_Xxi_ij,s_Xxi[l][j],&G1vol,&G2vol,&G3vol);	

							
							const dfloat dli = s_D[l][i];
							const dfloat dlj = s_D[l][j];
							FluxDeriv1+= dli * F1vol + dlj * G1vol ;
							FluxDeriv2+= dli * F2vol + dlj * G2vol ;
							FluxDeriv3+= dli * F3vol + dlj * G3vol ;

						}

						const int id  = ie*ngl2*Neq   +j*ngl+i;
						const int xid=ie*ngl2   +j*ngl+i;
						const dfloat r_Jac=Jac[xid];
						const dfloat r_Bx=Bx[xid];
						const dfloat r_By=By[xid];

						Qt[id]              = -  r_Jac *FluxDeriv1;
						Qt[id+ngl2]         = -  r_Jac *FluxDeriv2 - g_const*H_ij*r_Bx ;
						Qt[id+ngl2+ngl2]    = -  r_Jac *FluxDeriv3 - g_const*H_ij*r_By;

			}
		}				



    }



}
