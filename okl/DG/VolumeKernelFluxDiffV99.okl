//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.



void Fvol(const dfloat q1L,const dfloat q2L,const dfloat q3L,const dfloat qInvL,
          const dfloat q1R,const dfloat q2R,const dfloat q3R,const dfloat qInvR,
          const dfloat YetaL,const dfloat YetaR,
          const dfloat XetaL,const dfloat XetaR,
          dfloat * F1,dfloat * F2,dfloat * F3
         )
{
    const dfloat h_A = fourth_g*(q1L+q1R)*(q1L+q1R) ;
    const dfloat h2_A = half*(q1L * q1L+q1R * q1R) ;
    const dfloat hu_A = half* (q2L+q2R) ;
    const dfloat hv_A = half* (q3L+q3R) ;
    const dfloat u_A = half* (q2L*qInvL+q2R*qInvR) ;
    const dfloat v_A = half* (q3L*qInvL+q3R*qInvR) ;
    const dfloat Yeta_A = half*(YetaL+YetaR) ;
    const dfloat Xeta_A= half*(XetaL+XetaR) ;
    const dfloat pressureTerm = h_A - half_g*h2_A;
    *F1 = Yeta_A * hu_A - Xeta_A * hv_A;
    *F2 = Yeta_A *(hu_A * u_A   + pressureTerm ) - Xeta_A*hv_A * u_A;
    *F3 = Yeta_A *(hu_A * v_A) - Xeta_A*(hv_A*v_A+ pressureTerm );
}
void Gvol(const dfloat q1L,const dfloat q2L,const dfloat q3L,const dfloat qInvL,
          const dfloat q1R,const dfloat q2R,const dfloat q3R,const dfloat qInvR,
          const dfloat YxiL,const dfloat YxiR,
          const dfloat XxiL,const dfloat XxiR,
          dfloat * G1,dfloat * G2,dfloat * G3
         )
{
    const dfloat h_A = fourth_g*(q1L+q1R)*(q1L+q1R) ;
    const dfloat h2_A = half*(q1L * q1L+q1R * q1R) ;
    const dfloat hu_A = half* (q2L+q2R) ;
    const dfloat hv_A = half* (q3L+q3R) ;
    const dfloat u_A = half* (q2L*qInvL+q2R*qInvR) ;
    const dfloat v_A = half* (q3L*qInvL+q3R*qInvR) ;
    const dfloat Yxi_A = half*(YxiL+YxiR) ;
    const dfloat Xxi_A = half*( XxiL+ XxiR) ;
	const dfloat pressureTerm = h_A - half_g*h2_A;

    *G1 =-Yxi_A * hu_A   + Xxi_A*hv_A;
    *G2 =-Yxi_A * (hu_A * u_A   + pressureTerm ) + Xxi_A* hv_A * u_A;
    *G3 =-Yxi_A *(hu_A * v_A) + Xxi_A*(hv_A*v_A +pressureTerm );
}


kernel void VolumeKernelFluxDiff(const int Nelem,
                                 const dfloat * restrict Jac,
                                 const dfloat * restrict Y_xi,
                                 const dfloat * restrict Y_eta,
                                 const dfloat * restrict X_xi,
                                 const dfloat * restrict X_eta,
                                 const dfloat * restrict Q,
                                 const dfloat * restrict D,
                                 const dfloat * restrict Bx,
                                 const dfloat * restrict By,
                                 dfloat * restrict Qt)                                // const int * restrict isPartlyDry,
{



    for(int iEo = 0; iEo < Nelem; iEo+=NEpad; outer0)
    {

        shared dfloat s_D[ngl][ngl+nglPad];
        shared dfloat s_Q1[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Q2[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Q3[NEpad][ngl][ngl+nglPad];
        shared dfloat s_invQ[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Yeta[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Yxi[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Xeta[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Xxi[NEpad][ngl][ngl+nglPad];

        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {
                        const int id        =   i*ngl+j;
                        if (ieLoc==0)
                        {
                            s_D[i][j]       =   D[id];
                        }

                            const int xid       =   eleID*ngl2   +i*ngl+j;
                            const int Fid       =   eleID*ngl2*Neq   +i*ngl+j;



                            s_Yeta[ieLoc][i][j]    =   Y_eta[xid];
                            s_Yxi[ieLoc][i][j]     =   Y_xi[xid];
                            s_Xeta[ieLoc][i][j]    =   X_eta[xid];
                            s_Xxi[ieLoc][i][j]     =   X_xi[xid];
                            s_Q1[ieLoc][i][j]      =   Q[Fid];
                            s_Q2[ieLoc][i][j]      =   Q[Fid+ngl2];
                            s_Q3[ieLoc][i][j]      =   Q[Fid+ngl2+ngl2];
                            if(Q[Fid]>0)
                            {
                                s_invQ[ieLoc][i][j]    =   one/Q[Fid];
                            }
                            else
                            {
                                s_invQ[ieLoc][i][j]    =   zero;
                            }




                    }
                }
            }
        }

        barrier(localMemFence);

        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {

                            // read memory earlier to not stall later
                            const int id  = eleID*ngl2*Neq   +i*ngl+j;
                            const int xid=eleID*ngl2   +i*ngl+j;
                            const dfloat r_Jac=Jac[xid];
                            const dfloat r_Bx=Bx[xid];
                            const dfloat r_By=By[xid];

                            // split FluxDeriv split for F and G so there is some room for the compiler
                            dfloat FluxDeriv1   =   zero;
                            dfloat FluxDeriv2   =   zero;
                            dfloat FluxDeriv3  =   zero;

                            const dfloat invQ1ij      =   s_invQ[ieLoc][i][j];
                            const dfloat H_ij         =   s_Q1[ieLoc][i][j];
                            const dfloat HU_ij        =   s_Q2[ieLoc][i][j];
                            const dfloat HV_ij        =   s_Q3[ieLoc][i][j];
                            const dfloat r_Yeta_ij    =   s_Yeta[ieLoc][i][j];
                            const dfloat r_Xeta_ij    =   s_Xeta[ieLoc][i][j];
                            const dfloat r_Yxi_ij     =   s_Yxi[ieLoc][i][j];
                            const dfloat r_Xxi_ij     =   s_Xxi[ieLoc][i][j];

                            occaUnroll(ngl)
                            for (int l=0; l<ngl; ++l)
                            {

                                const dfloat djl = s_D[j][l];
                                dfloat F1vol=zero,F2vol=zero,F3vol=zero;
                                Fvol(H_ij,HU_ij,HV_ij,invQ1ij,s_Q1[ieLoc][i][l],s_Q2[ieLoc][i][l],s_Q3[ieLoc][i][l],s_invQ[ieLoc][i][l],r_Yeta_ij,s_Yeta[ieLoc][i][l],r_Xeta_ij,s_Xeta[ieLoc][i][l],&F1vol,&F2vol,&F3vol);



                                FluxDeriv1+= djl * F1vol ;

                                FluxDeriv2+= djl * F2vol ;

                                FluxDeriv3+= djl * F3vol  ;
                            }

                            occaUnroll(ngl)
                            for (int l=0; l<ngl; ++l)
                            {

                                const dfloat dil = s_D[i][l];

                                dfloat G1vol=zero,G2vol=zero,G3vol=zero;
                                Gvol(H_ij,HU_ij,HV_ij,invQ1ij,s_Q1[ieLoc][l][j],s_Q2[ieLoc][l][j],s_Q3[ieLoc][l][j],s_invQ[ieLoc][l][j],r_Yxi_ij,s_Yxi[ieLoc][l][j],r_Xxi_ij,s_Xxi[ieLoc][l][j],&G1vol,&G2vol,&G3vol);


                                FluxDeriv1+=  dil * G1vol ;

                                FluxDeriv2+=  dil * G2vol ;

                                FluxDeriv3+=  dil * G3vol ;

                            }



                            Qt[id]              = -  r_Jac *FluxDeriv1;
                            Qt[id+ngl2]         = -  r_Jac *FluxDeriv2 - g_const*H_ij*r_Bx ;
                            Qt[id+ngl2+ngl2]    = -  r_Jac *FluxDeriv3  -g_const*H_ij*r_By;

                        }

                }
            }
        }



    }



}
