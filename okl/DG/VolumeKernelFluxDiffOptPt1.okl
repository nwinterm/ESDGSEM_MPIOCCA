kernel void VolumeKernelFluxDiff(const int Nelem,const dfloat * restrict Jac,const dfloat * restrict Y_xi,
                                 const dfloat * restrict Y_eta,const dfloat * restrict X_xi,const dfloat * restrict X_eta,
                                 const dfloat * restrict Q,const dfloat * restrict D,const dfloat * restrict Bx,
                                 const dfloat * restrict By,dfloat * restrict Qt)
{
    for(int iEo = 0; iEo < Nelem; iEo+=NEpad; outer0)
    {
        shared dfloat s_D[ngl][ngl+nglPad];
        shared dfloat s_Q1[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Q2[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Q3[NEpad][ngl][ngl+nglPad];
		shared dfloat s_invQ[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Yeta[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Yxi[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Xeta[NEpad][ngl][ngl+nglPad];
        shared dfloat s_Xxi[NEpad][ngl][ngl+nglPad];
        for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {
            for (int i=0; i<ngl; ++i; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {
                    const int eleID     =   iEo + ieLoc;
                    if (eleID<Nelem)
                    {
                        const int id        =   i*ngl+j;
                        const int xid       =   eleID*ngl2   +i*ngl+j;
                        const int Fid       =   eleID*ngl2*Neq   +i*ngl+j;
                        if (ieLoc==0)
                        {
                            s_D[i][j]       =   D[id];
                        }
                        s_Yeta[ieLoc][i][j]    =   Y_eta[xid];
                        s_Yxi[ieLoc][i][j]     =   Y_xi[xid];
                        s_Xeta[ieLoc][i][j]    =   X_eta[xid];
                        s_Xxi[ieLoc][i][j]     =   X_xi[xid];
						s_Q1[ieLoc][i][j]      =   Q[Fid];
						s_Q2[ieLoc][i][j]      =   Q[Fid+ngl2];
						s_Q3[ieLoc][i][j]      =   Q[Fid+ngl2+ngl2];
						s_invQ[ieLoc][i][j]    =   one/Q[Fid];
					}
				}
            }
        }
        barrier(localMemFence);
