kernel void VolumeKernel(int Nelem,
                         dfloat *  Jac,
                         dfloat *  Y_xi,
                         dfloat *  Y_eta,
                         dfloat *  X_xi,
                         dfloat *  X_eta,
                         dfloat *  Q,
                         dfloat * D,
                         dfloat *  Bx,
                         dfloat *  By,
                         dfloat *  Qt)
{



    for(int ie = 0; ie < Nelem; ie++; outer0)
    {



        shared dfloat s_F1[ngl][ngl];
        shared dfloat s_F2[ngl][ngl];
        shared dfloat s_F3[ngl][ngl];
        shared dfloat s_G1[ngl][ngl];
        shared dfloat s_G2[ngl][ngl];
        shared dfloat s_G3[ngl][ngl];


        // calcFluxes
        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {

                int id=j*ngl+i;
                int xid=ie*ngl2   +j*ngl+i;
				int Fid = ie*ngl2*Neq   +j*ngl+i;

                dfloat r_invQ1;

                if (Q[Fid]>PosPresTOL)
                {
                    r_invQ1 = one/Q[Fid];
                }
                else
                {
                    r_invQ1=zero;
                };


                dfloat F1 = Q[Fid+ngl2];
                dfloat F2 = Q[Fid+ngl2]*Q[Fid+ngl2]*r_invQ1 + 0.5*g_const*Q[Fid]*Q[Fid];
                dfloat F3 = Q[Fid+ngl2+ngl2]*Q[Fid+ngl2]*r_invQ1;
                dfloat G1 = Q[Fid+ngl2+ngl2];
                dfloat G2 = Q[Fid+ngl2]*Q[Fid+ngl2+ngl2]*r_invQ1;
                dfloat G3 = Q[Fid+ngl2+ngl2]*Q[Fid+ngl2+ngl2]*r_invQ1 + 0.5*g_const*Q[Fid]*Q[Fid];


                s_F1[i][j]=Y_eta[xid] * F1 - X_eta[xid]* G1;
                s_G1[i][j]=-Y_xi[xid] * F1 + X_xi[xid]* G1;

                s_F2[i][j]=Y_eta[xid] * F2 - X_eta[xid]* G2;
                s_G2[i][j]=-Y_xi[xid] * F2 + X_xi[xid]* G2;

                s_F3[i][j]=Y_eta[xid] * F3 - X_eta[xid]* G3;
                s_G3[i][j]=-Y_xi[xid] * F3 + X_xi[xid]* G3;



            }
        }

        barrier(localMemFence);

        for (int j=0; j<ngl; ++j; inner1)
        {
            for (int i=0; i<ngl; ++i; inner0)
            {
                dfloat FluxDeriv1=zero;
                dfloat FluxDeriv2=zero;
                dfloat FluxDeriv3=zero;

                // unroll loop
                occaUnroll(ngl)
                for (int l=0; l<ngl; ++l)
                {

                    FluxDeriv1+= D[i*ngl+l] * s_F1[l][j];
                    FluxDeriv1+= D[j*ngl+l] * s_G1[i][l];


                    FluxDeriv2+=D[i*ngl+l] * s_F2[l][j];
                    FluxDeriv2+=D[j*ngl+l] * s_G2[i][l];;



                    FluxDeriv3+=D[i*ngl+l] * s_F3[l][j];
                    FluxDeriv3+=D[j*ngl+l] * s_G3[i][l];


                }


                int id  = ie*ngl2*Neq   +j*ngl+i;
                int xid=ie*ngl2   +j*ngl+i;


                Qt[id]              = -  Jac[xid] *FluxDeriv1;
                Qt[id+ngl2]         = -  Jac[xid] *FluxDeriv2 - g_*s_Q1[i][j]*Bx[xid] ;
                Qt[id+ngl2+ngl2]    = -  Jac[xid] *FluxDeriv3 - g_*s_Q1[i][j]*By[xid];




            }
        }



    }



}

