kernel void SurfaceKernelDiscBottom(const int Nelem,
                          const dfloat * restrict Jac,
                          const int * restrict  ElemEdgeMasterSlave,
                          const int * restrict  ElemEdgeOrientation,
                          const int * restrict  ElemToEdge,
                          const dfloat * restrict  DBSurf1,
                          const dfloat * restrict  DBSurf2,
                          dfloat * restrict  Qt)
{

    for(int iEo = 0; iEo < Nelem; iEo+=NEsurfpad; outer0)
    {



        //SIDE 1 (BOTTOM) and 3 (TOP)
        for (int ieLoc=0; ieLoc<NEsurfpad; ieLoc++; inner2)
        {
            for (int is=0; is<2; is++; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {

                    const int ie = iEo + ieLoc;
                    if (ie< Nelem)
                    {
                        const int iside = 2*is;

                        const int ifa = ElemToEdge[ie*4 + iside]-1;        //get id of element side

                        const int reversedOrder = ElemEdgeOrientation[ie*4 + iside];
                        //increment = j if order is correct, else increment = ngl-1-j
                        const int increment  = reversedOrder*j + (1-reversedOrder)*(ngl-1 -j);

                        const int edgeIDx = ifa*ngl+increment;


                        const int xid = ie*ngl2 + is*(ngl2-ngl) + j;



                        const int id    = ie*ngl2*Neq+ is*(ngl2-ngl) +j;

                        const dfloat r_Jac = Jac[xid];
			


                        Qt[id+ngl2]         +=     r_Jac*       DBSurf1[edgeIDx];
                        Qt[id+ngl2+ngl2]    +=     r_Jac* DBSurf2[edgeIDx];


                    }



                }

            }


        }



        barrier(localMemFence);

        //SIDE 2 (RIGHT) and 4 (LEFT)
        //Then do sides 1 and 3
        for (int ieLoc=0; ieLoc<NEsurfpad; ieLoc++; inner2)
        {
            for (int is=0; is<2; is++; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {

                    const int ie = iEo + ieLoc;
                    if (ie< Nelem)
                    {
                        const int iside = 2*is+1;


                        const int ifa = ElemToEdge[ie*4 + iside]-1;        //get id of element side

                        const int reversedOrder = ElemEdgeOrientation[ie*4 + iside];
                        //increment = j if order is correct, else increment = ngl-1-j
                        const int increment  = reversedOrder*j + (1-reversedOrder)*(ngl-1 -j);

                        const int edgeIDx = ifa*ngl+increment;



                        const int xid = ie*ngl2+j*ngl + (1-is)*(ngl-1);
                        const int id= ie*ngl2*Neq+(1-is)*(ngl-1) +j*ngl;

                        const dfloat r_Jac = Jac[xid];



                        Qt[id+ngl2]         +=   r_Jac* DBSurf1[edgeIDx];
                        Qt[id+ngl2+ngl2]    +=   r_Jac* DBSurf2[edgeIDx];


                    }
                }
            }


        }


    }
}
