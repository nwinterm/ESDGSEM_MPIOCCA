kernel void calcDiscBottomSurf(const int Nfaces,
                               const dfloat * restrict  qL,
                               const dfloat * restrict  qR,
                               const dfloat * restrict  bL,
                               const dfloat * restrict  bR,
                               const dfloat * restrict  normalx,
                               const dfloat * restrict  normaly,
                               const dfloat * restrict Scal,
                               dfloat * restrict  discBottomSurf1,
                               dfloat * restrict  discBottomSurf2)
{
    for (int ifa_base=0; ifa_base<Nfaces; ifa_base+=Nedgepad; outer0)
    {



        for (int ifa_inner = 0; ifa_inner < Nedgepad; ifa_inner++; inner1)
        {
            for(int i=0; i<ngl; i++; inner0)
            {

                const int ifa = ifa_base + ifa_inner;

                if (ifa<Nfaces)
                {

                    const int edgeID=ifa*ngl*Neq + i;   //for edge wise solution
                    const int edgeIDX=ifa*ngl + i;      //for edge wise spatial values (BOTTOM)


                    const dfloat scaling=Scal[edgeIDX];
                    const dfloat nx=normalx[edgeIDX];
                    const dfloat ny=normaly[edgeIDX];

                    dfloat rJumpTerm =  scaling*geomFace*  half* half* g_const*(bR[edgeIDX]-bL[edgeIDX]) *  (qL[edgeID] + qR[edgeID]);

                    discBottomSurf1[edgeIDX]  = fabs(nx)*rJumpTerm;
                    discBottomSurf2[edgeIDX]  = fabs(ny)*rJumpTerm;
                }

            }
        }





    }

