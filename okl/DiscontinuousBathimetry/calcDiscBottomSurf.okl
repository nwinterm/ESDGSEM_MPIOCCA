//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.



kernel void calcDiscBottomSurf(const int Nfaces,
                          	const int  * restrict  edgeReversed,
                               const dfloat * restrict  qL,
                               const dfloat * restrict  qR,
                               const dfloat * restrict  bL,
                               const dfloat * restrict  bR,
                               const dfloat * restrict  normalx,
                               const dfloat * restrict  normaly,
                               const dfloat * restrict Scal,
                               dfloat * restrict  discBottomSurf1,
                               dfloat * restrict  discBottomSurf2)
{
    for (int ifa_base=0; ifa_base<Nfaces; ifa_base+=Nedgepad; outer0)
    {



        for (int ifa_inner = 0; ifa_inner < Nedgepad; ifa_inner++; inner1)
        {
            for(int i=0; i<ngl; i++; inner0)
            {

                const int ifa = ifa_base + ifa_inner;

                if (ifa<Nfaces)
                {
		     const int ireversed = edgeReversed[ifa];
                    const int edgeID=ifa*ngl*Neq + i;   //for edge wise solution
                    const int edgeIDX=ifa*ngl + i;      //for edge wise spatial values (BOTTOM)
		    const int edgeIDR = ifa*ngl*Neq + (1-ireversed)*(ngl-1-i) + ireversed*i;
		    const int edgeIDXR = ifa*ngl + (1-ireversed)*(ngl-1-i) + ireversed*i;


                    const dfloat scaling=Scal[edgeIDX];
                    const dfloat nx=normalx[edgeIDX];
                    const dfloat ny=normaly[edgeIDX];

                    const dfloat rJumpTerm =  scaling*geomFace*  fourth* g_const*(bR[edgeIDXR ]-bL[edgeIDX]) *  (qL[edgeID] + qR[edgeIDR ]);

                    discBottomSurf1[edgeIDX]  = -nx*rJumpTerm;
                    discBottomSurf2[edgeIDX]  = -ny*rJumpTerm;
                }

            }
        }





    }

