//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.



kernel void SurfaceKernelVisc(const int Nelem,
                              const dfloat *Jac,
                              const int * restrict ElemEdgeMasterSlave,
                              const int * restrict ElemEdgeOrientation,
                              const int * restrict ElemToEdge,
                              const dfloat * restrict  FStar,
                              dfloat * restrict  Qt)
{



    for(int iEo = 0; iEo < Nelem; iEo+=NEsurfpad; outer0)
    {



        //SIDE 1 (BOTTOM) and 3 (TOP)
        for (int ieLoc=0; ieLoc<NEsurfpad; ieLoc++; inner2)
        {
            for (int is=0; is<2; is++; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {

                    const int ie = iEo + ieLoc;
                    if (ie< Nelem)
                    {
                        const int iside = 2*is;

                        const int ifa = ElemToEdge[ie*4 + iside]-1;        //get id of element side

                        const int reversedOrder = ElemEdgeOrientation[ie*4 + iside];
                        //increment = j if order is correct, else increment = ngl-1-j
                        const int increment  = reversedOrder*j + (1-reversedOrder)*(ngl-1 -j);

                        //THIS WAY THE STORAGE IN THE SHARED VARIABLES SHOULD ALWAYS BE IN THE CORRECT ORDER FOR THE LOCAL COORDINATES

                        const int idFaceLoc = ifa*ngl*(Neq-1)+ increment;        //get local id on the side storage SurfaceParts
                        const int edgeIDx = ifa*ngl+increment;


                        const int xid = ie*ngl2 + is*(ngl2-ngl) + j;



                        const int id    = ie*ngl2*(Neq)+ is*(ngl2-ngl) +j;


                        const int r_Masterslave = ElemEdgeMasterSlave[ie*4+iside];
                        const dfloat r_Jac = Jac[xid];



            		Qt[id+ngl2]         +=    - r_Masterslave* r_Jac * FStar[idFaceLoc ]       ;
            		Qt[id+ngl2+ngl2]    +=    - r_Masterslave* r_Jac * FStar[idFaceLoc +ngl]    ;




                    }



                }

            }


        }



        barrier(localMemFence);

        //SIDE 2 (RIGHT) and 4 (LEFT)
        //Then do sides 1 and 3
        for (int ieLoc=0; ieLoc<NEsurfpad; ieLoc++; inner2)
        {
            for (int is=0; is<2; is++; inner1)
            {
                for (int j=0; j<ngl; ++j; inner0)
                {

                    const int ie = iEo + ieLoc;
                    if (ie< Nelem)
                    {
                        const int iside = 2*is+1;


                        const int ifa = ElemToEdge[ie*4 + iside]-1;        //get id of element side

                        const int reversedOrder = ElemEdgeOrientation[ie*4 + iside];
                        //increment = j if order is correct, else increment = ngl-1-j
                        const int increment  = reversedOrder*j + (1-reversedOrder)*(ngl-1 -j);

                        //THIS WAY THE STORAGE IN THE SHARED VARIABLES SHOULD ALWAYS BE IN THE CORRECT ORDER FOR THE LOCAL COORDINATES

                        const int idFaceLoc = ifa*ngl*(Neq-1)+ increment;        //get local id on the side storage SurfaceParts
                        const int edgeIDx = ifa*ngl+increment;



                        const int xid = ie*ngl2+j*ngl + (1-is)*(ngl-1);
                        const int id= ie*ngl2*(Neq)+(1-is)*(ngl-1) +j*ngl;




                        const int r_Masterslave = ElemEdgeMasterSlave[ie*4+iside];
                        const dfloat r_Jac = Jac[xid];

            		Qt[id+ngl2]         +=    - r_Masterslave* r_Jac * FStar[idFaceLoc ] ;
            		Qt[id+ngl2+ngl2]    +=    - r_Masterslave* r_Jac * FStar[idFaceLoc +ngl]   ;


                    }
                }
            }


        }


    }



}




























