kernel void SurfaceKernelVisc(const int Nelem,
                              const dfloat *Jac,
                              const int * restrict ElemEdgeMasterSlave,
                              const int * restrict ElemEdgeOrientation,
                              const int * restrict ElemToEdge,
                              const dfloat * restrict  FStar,
                              dfloat * restrict  Qt)
{

    for(int ie = 0; ie < Nelem; ie++; outer0)
    {
        shared dfloat s_FStar[4*ngl*(Neq-1)];
        shared dfloat s_Jac[4*ngl];



        for(int is=0; is<4; is++; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {

                int ifa = ElemToEdge[ie*4 + is]-1;        //get id of element side


                // is the numerical flux stored in reversed order for this element?
                // "1" means the order is correct, 0 means it is not
                int reversedOrder = ElemEdgeOrientation[ie*4 + is];
                //increment = j if order is correct, else increment = ngl-1-j
                int increment  = reversedOrder*j + (1-reversedOrder)*(ngl-1 -j);

                //THIS WAY THE STORAGE IN THE SHARED VARIABLES SHOULD ALWAYS BE IN THE CORRECT ORDER FOR THE LOCAL COORDINATES

                int idFaceLoc = ifa*ngl*(Neq-1) + increment;        //get local id on the side storage SurfaceParts
                int edgeIDx = ifa*ngl+increment;



                int id=is*ngl*(Neq-1)+j;                // get id for surface parts for THIS element
                int id2 = is*ngl+j;
                int xid;
                int idx = is*ngl+j;

                switch(is)
                {
                case 0: //bottom side
                    xid = ie*ngl2+j;
                    break;
                case 2: //top side
                    xid = ie*ngl2+ngl2-ngl+j;
                    break;
                case 3: //left side
                    xid = ie*ngl2+j*ngl;
                    break;
                case 1: //right side
                    xid = ie*ngl2+(j+1)*ngl-1;
                    break;

                }
                s_Jac[id2]=Jac[xid];



                s_FStar[id] = FStar[idFaceLoc];
                s_FStar[id+ngl] = FStar[idFaceLoc+ngl];          //LOOPS OVER EQUATIONS HERE




            }
        }


        barrier(localMemFence);

        //SIDE 1 (BOTTOM)
        for (int j=0; j<ngl; ++j; inner0)
        {
            int id= ie*ngl2*(Neq-1)+j;
            int MasterSlave = ElemEdgeMasterSlave[ie*4];

            int idfaceloc = j;
            int idxfaceloc = j;




            Qt[id]         +=    - MasterSlave* s_Jac[idxfaceloc] * s_FStar[idfaceloc]       ;
            Qt[id+ngl2]    +=    - MasterSlave* s_Jac[idxfaceloc] * s_FStar[idfaceloc+ngl]    ;

        }




        barrier(localMemFence);
        // SIDE 3 (TOP)

        for (int j=0; j<ngl; ++j; inner0)
        {

            int id= ie*ngl2*(Neq-1)+ngl2-ngl+j;
            int MasterSlave = ElemEdgeMasterSlave[ie*4+2];

            int idfaceloc = 2*ngl*(Neq-1)+j;
            int idxfaceloc = 2*ngl+j;



            Qt[id]         +=    - MasterSlave* s_Jac[idxfaceloc] * (s_FStar[idfaceloc]       );
            Qt[id+ngl2]    +=    - MasterSlave* s_Jac[idxfaceloc] * (s_FStar[idfaceloc+ngl]    );


        }



        barrier(localMemFence);
        //SIDE 2 (RIGHT)
        //Then do sides 1 and 3
        for (int j=0; j<ngl; ++j; inner0)
        {
            int MasterSlave = ElemEdgeMasterSlave[ie*4+1];
            int id= ie*ngl2*(Neq-1)+(ngl-1) +j*ngl;

            int idfaceloc = 1*ngl*(Neq-1)+j;
            int idxfaceloc = 1*ngl+j;



 
            Qt[id]         +=    - MasterSlave* s_Jac[idxfaceloc] * (s_FStar[idfaceloc]        );
            Qt[id+ngl2]    +=    - MasterSlave* s_Jac[idxfaceloc] * (s_FStar[idfaceloc+ngl]   );
        }



        barrier(localMemFence);

        //SIDE 4 (LEFT)

        for (int j=0; j<ngl; ++j; inner0)
        {
            int MasterSlave = ElemEdgeMasterSlave[ie*4+3];
            int id= ie*ngl2*(Neq-1)+ j*ngl;

            int idfaceloc = 3*ngl*(Neq-1)+j;
            int idxfaceloc = 3*ngl+j;



            Qt[id]         +=    - MasterSlave* s_Jac[idxfaceloc] * (s_FStar[idfaceloc]        );
            Qt[id+ngl2]    +=    - MasterSlave* s_Jac[idxfaceloc] * (s_FStar[idfaceloc+ngl]    );





        }













    }


}

