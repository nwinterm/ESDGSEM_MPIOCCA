//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.



kernel void VolumeKernelViscose(const int Nelem,
                                const dfloat * restrict Jac,
                                const dfloat * restrict  Y_xi,
                                const dfloat * restrict  Y_eta,
                                const dfloat * restrict  X_xi,
                                const dfloat * restrict  X_eta,
                                const dfloat * restrict  qX,
                                const dfloat * restrict  qY,
                                const dfloat * restrict D,
                                const dfloat * restrict ViscPara,
                                dfloat * restrict  Qt)
{

    for(int iEo = 0; iEo < Nelem; iEo+=NEpad; outer0)
    {


        shared dfloat s_F2[NEpad][ngl][ngl+nglPad];
        shared dfloat s_F3[NEpad][ngl][ngl+nglPad];

        shared dfloat s_G2[NEpad][ngl][ngl+nglPad];
        shared dfloat s_G3[NEpad][ngl][ngl+nglPad];

        shared dfloat s_D[ngl][ngl];
	//shared dfloat s_ViscParam[NEpad];


        // calcFluxes
     for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {

        for (int i=0; i<ngl; ++i; inner1)
        {
            for (int j=0; j<ngl; ++j; inner0)
            {

                const int eleID     =   iEo + ieLoc;
                if (eleID<Nelem)
                 {

		//	if ((i==0)&&(j==0)){
		//		s_ViscParam[ieLoc] = ViscPara[eleID];
		//	}
		const dfloat r_ViscParam = ViscPara[eleID];
                const int xid=eleID     *ngl2   +j*ngl+i;
                const int id=j*ngl+i;
                const int Fid = eleID     *ngl2*(Neq-1)   +j*ngl+i;
		if(ieLoc==0)
                        {
                		s_D[i][j]=D[id];
			}


                const dfloat F2 = r_ViscParam* qX[Fid];
                const dfloat F3 = r_ViscParam* qX[Fid+ngl2];

                const dfloat G2 = r_ViscParam*  qY[Fid];
                const dfloat G3 = r_ViscParam*  qY[Fid+ngl2];

                const dfloat r_Yeta=Y_eta[xid];
                const dfloat r_Yxi=Y_xi[xid];
                const dfloat r_Xeta=X_eta[xid];
                const dfloat r_Xxi=X_xi[xid];


                s_F2[ieLoc][i][j]=r_Yeta * F2 - r_Xeta* G2;
                s_G2[ieLoc][i][j]=-r_Yxi * F2 + r_Xxi* G2;

                s_F3[ieLoc][i][j]=r_Yeta * F3 - r_Xeta* G3;
                s_G3[ieLoc][i][j]=-r_Yxi * F3 + r_Xxi* G3;

		}

            }
        }
	}

        barrier(localMemFence);


     for (int ieLoc=0; ieLoc<NEpad; ++ieLoc; inner2)
        {

        for (int j=0; j<ngl; ++j; inner1)
        {
            for (int i=0; i<ngl; ++i; inner0)
            {

                const int eleID     =   iEo + ieLoc;
                if (eleID<Nelem)
                 {

                dfloat FluxDeriv2=zero;
                dfloat FluxDeriv3=zero;

                // unroll loop
                occaUnroll(ngl)
                for (int l=0; l<ngl; ++l)
                {
                    FluxDeriv2+=s_D[l][i] * s_F2[ieLoc][l][j];
                    FluxDeriv2+=s_D[l][j] * s_G2[ieLoc][i][l];

                    FluxDeriv3+=s_D[l][i] * s_F3[ieLoc][l][j];

                    FluxDeriv3+=s_D[l][j] * s_G3[ieLoc][i][l];

                }




                const int id  = eleID     *ngl2*Neq   +j*ngl+i;

                const int xid=eleID     *ngl2   +j*ngl+i;

                const dfloat r_Jac=Jac[xid];


                Qt[id+ngl2]         += r_Jac *FluxDeriv2  ;
                Qt[id+ngl2+ngl2]    +=   r_Jac *FluxDeriv3 ;


		}

            }
        }
	}


    }



}
