
kernel void calcNumFluxesViscose(const int Nfaces,const int * EdgeData,const dfloat * normalx,const dfloat * normaly,const dfloat *Scal,dfloat * ViscParaL,dfloat * ViscParaR, const dfloat * qXL,const dfloat * qXR,const dfloat * qYL,const dfloat * qYR,dfloat * SurfaceParts)
{
        for (int ifa=0;ifa<Nfaces;ifa++;outer0){


            for(int i=0;i<ngl;i++;inner0){



                const int edgeIDX=ifa*ngl + i;              //for normals!!
                const int edgeID=ifa*ngl*Neq + i;           //for values!!
                const int cpuL          =EdgeData[8*ifa+5];     // rank of cpuL
                const int cpuR          =EdgeData[8*ifa+6];     // rank of cpuR

                const dfloat nx=normalx[edgeIDX];
                const dfloat ny=normaly[edgeIDX];
                const dfloat scaling=Scal[edgeIDX];

                dfloat NumFlux[Neq];



                const dfloat fVisc1_L = nx* qXL[edgeID] + ny * qYL[edgeID] ;
                const dfloat fVisc1_R = nx* qXR[edgeID] + ny * qYR[edgeID] ;

                const dfloat fVisc2_L = nx* qXL[edgeID+ngl] + ny * qYL[edgeID+ngl] ;
                const dfloat fVisc2_R = nx* qXR[edgeID+ngl] + ny * qYR[edgeID+ngl] ;

                const dfloat fVisc3_L = nx* qXL[edgeID+ngl+ngl] + ny * qYL[edgeID+ngl+ngl] ;
                const dfloat fVisc3_R = nx* qXR[edgeID+ngl+ngl] + ny * qYR[edgeID+ngl+ngl] ;


             //   const dfloat viscPara = 0.5*(ViscParaL[ifa] + ViscParaR[ifa]);

                if (cpuL == -1) {
                    NumFlux[0]=0.0;
                    NumFlux[1]=0.0;
                    NumFlux[2]=0.0;

                }else if(cpuR == -1){
                    NumFlux[0]=0.0;
                    NumFlux[1]=0.0;
                    NumFlux[2]=0.0;


		}else{
              //      NumFlux[0]=0.5*(fVisc1_L+fVisc1_R);
              //      NumFlux[1]=0.5*(fVisc2_L+fVisc2_R);
              //      NumFlux[2]=0.5*(fVisc3_L+fVisc3_R);


                    NumFlux[0]=0.5*(ViscParaL[ifa]*fVisc1_L+ViscParaR[ifa]*fVisc1_R);
                    NumFlux[1]=0.5*(ViscParaL[ifa]*fVisc2_L+ViscParaR[ifa]*fVisc2_R);
                    NumFlux[2]=0.5*(ViscParaL[ifa]*fVisc3_L+ViscParaR[ifa]*fVisc3_R);




                }




                SurfaceParts[edgeID]          =  - scaling*geomFace*  NumFlux[0];
                SurfaceParts[edgeID+ngl]      =  - scaling*geomFace*  NumFlux[1];
                SurfaceParts[edgeID+ngl+ngl]  =  - scaling*geomFace*  NumFlux[2];

              }
            }





}
