//==================================================================================================================================
// Copyright (c) 2019 Niklas Wintermeyer
// Copyright (c) 2019 Gregor Gassner
// Copyright (c) 2019 Andrew Winters
//
// This file is part of ESDGSEM_MPIOCCA (github.com/ESDGSEM_MPIOCCA). ESDGSEM_MPIOCCA is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
//
// ESDGSEM_MPIOCCA is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
//
// You should have received a copy of the GNU General Public License along with ESDGSEM_MPIOCCA. If not, see <http://www.gnu.org/licenses/>.



kernel void calcNumFluxesViscose(const int Nfaces,
                                 const int * restrict EdgeData,
                                 const dfloat * restrict  normalx,
                                 const dfloat * restrict  normaly,
                                 const dfloat * restrict Scal,
                                 const dfloat * restrict ViscParaL,
                                 const dfloat * restrict ViscParaR,
                                 const dfloat * restrict  qXL,
                                 const dfloat * restrict  qXR,
                                 const dfloat * restrict  qYL,
                                 const dfloat * restrict  qYR,
                                 dfloat * restrict  SurfaceParts)
{
    for (int ifa_base=0; ifa_base<Nfaces; ifa_base+=Nedgepad; outer0)
    {



        for (int ifa_inner = 0; ifa_inner < Nedgepad; ifa_inner++; inner1)
        {
            for(int i=0; i<ngl; i++; inner0)
            {

                const int ifa = ifa_base + ifa_inner;

                if (ifa<Nfaces)
                {



            const int edgeIDX=ifa*ngl + i;              //for normals!!
            const int edgeID=ifa*ngl*(Neq-1) + i;           //for values!!
            const int cpuL          =EdgeData[8*ifa+5];     // rank of cpuL
            const int cpuR          =EdgeData[8*ifa+6];     // rank of cpuR

            const dfloat nx=normalx[edgeIDX];
            const dfloat ny=normaly[edgeIDX];
            const dfloat scaling=Scal[edgeIDX];

            dfloat NumFlux[Neq-1];



            const dfloat fVisc2_L = nx* qXL[edgeID] + ny * qYL[edgeID] ;
            const dfloat fVisc2_R = nx* qXR[edgeID] + ny * qYR[edgeID] ;

            const dfloat fVisc3_L = nx* qXL[edgeID+ngl] + ny * qYL[edgeID+ngl] ;
            const dfloat fVisc3_R = nx* qXR[edgeID+ngl] + ny * qYR[edgeID+ngl] ;


            if (cpuL == -1)
            {
                NumFlux[0]=zero;
                NumFlux[1]=zero;

            }
            else if(cpuR == -1)
            {
                NumFlux[0]=zero;
                NumFlux[1]=zero;

            }
            else
            {


               // NumFlux[0]=half*(ViscParaL[ifa]*fVisc1_L+ViscParaR[ifa]*fVisc1_R);
               // NumFlux[1]=half*(ViscParaL[ifa]*fVisc2_L+ViscParaR[ifa]*fVisc2_R);
               // NumFlux[2]=half*(ViscParaL[ifa]*fVisc3_L+ViscParaR[ifa]*fVisc3_R);

                NumFlux[0]=half*max(ViscParaL[ifa],ViscParaR[ifa])*(fVisc2_L+fVisc2_R);
                NumFlux[1]=half*max(ViscParaL[ifa],ViscParaR[ifa])*(fVisc3_L+fVisc3_R);


            }




            SurfaceParts[edgeID]          =  - scaling*geomFace*  NumFlux[0];
            SurfaceParts[edgeID+ngl]      =  - scaling*geomFace*  NumFlux[1];


        }
    }
}




}
