kernel void calcNumFluxes(const int Nfaces,
                          const int * restrict  EdgeData,
                          const int  * restrict  edgeReversed,
                          const dfloat * restrict  normalx,
                          const dfloat * restrict  normaly,
                          const dfloat * restrict Scal,
                          const dfloat * restrict  qL,
                          const dfloat * restrict  qR,
                          const dfloat * restrict  BL,
                          const dfloat * restrict  BR,
                          dfloat * restrict  SurfaceParts)
{
    for (int ifa_base=0; ifa_base<Nfaces; ifa_base+=Nedgepad; outer0)
    {



        for (int ifa_inner = 0; ifa_inner < Nedgepad; ifa_inner++; inner1)
        {
            for(int i=0; i<ngl; i++; inner0)
            {

                const int ifa = ifa_base + ifa_inner;

                if (ifa<Nfaces)
                {



                    const int edgeIDX=ifa*ngl + i;              //for normals!!
                    const int edgeID=ifa*ngl*Neq + i;           //for values!!

                    const int ireversed = edgeReversed[ifa];
                    const int edgeIDR = ifa*ngl*Neq + (1-ireversed)*(ngl-1-i) + ireversed*i;
                    const int edgeIDXR = ifa*ngl + (1-ireversed)*(ngl-1-i) + ireversed*i;


                    const dfloat nx=normalx[edgeIDX];
                    const dfloat ny=normaly[edgeIDX];
                    const dfloat scaling=Scal[edgeIDX];

                    dfloat NumFluxF[Neq];
                    dfloat NumFluxG[Neq];
                    dfloat NumFlux[Neq];



                    const dfloat hL=qL[edgeID];
                    const dfloat hR=qR[edgeIDR ];




                    dfloat uL;
                    dfloat vL;
                    dfloat huL;
                    dfloat hvL;
                    dfloat cL;
                    if(hL>PosPresTOL)
                    {
                        uL=qL[edgeID+ngl]/hL;
                        vL=qL[edgeID+ngl+ngl]/hL;
                        huL=qL[edgeID+ngl];
                        hvL=qL[edgeID+ngl+ngl];
                        cL=sqrt(g_const*hL);
                    }
                    else
                    {

                        uL =zero;
                        vL =zero;
                        huL=zero;
                        hvL=zero;
                        cL=zero;
                    }

                    dfloat uR;
                    dfloat vR;
                    dfloat huR;
                    dfloat hvR;
                    dfloat cR;
                    if(hR>PosPresTOL)
                    {
                        uR=qR[edgeIDR +ngl]/hR;
                        vR=qR[edgeIDR +ngl+ngl]/hR;
                        huR=qR[edgeIDR +ngl];
                        hvR=qR[edgeIDR +ngl+ngl];
                        cR=sqrt(g_const*hR);

                    }
                    else
                    {
                        uR =zero;
                        vR =zero;
                        huR=zero;
                        hvR=zero;
                        cR=zero;
                    }

                    const dfloat F1L = huL ;
                    const dfloat F1R = huR ;
                    const dfloat G1L = hvL ;
                    const dfloat G1R = hvR ;

                    const dfloat F2L = huL*uL + half *g_const * hL*hL ;
                    const dfloat F2R = (huR*uR + half *g_const * hR*hR) ;
                    const dfloat G2L =  huL*vL;
                    const dfloat G2R =   huR*vR;

                    const dfloat F3L = huL*vL  ;
                    const dfloat F3R =  huR*vR  ;
                    const dfloat G3L = (hvL*vL + half *g_const * hL*hL) ;
                    const dfloat G3R =  (hvR*vR + half *g_const * hR*hR) ;



                    const dfloat lambda1L  = cL + fabs(uL);
                    const dfloat lambda1R  = cR + fabs(uR);
                    const dfloat maxLambda1 = max(lambda1L,lambda1R);

                    const dfloat lambda2L  = cL + fabs(vL);
                    const dfloat lambda2R  = cR + fabs(vR);
                    const dfloat maxLambda2 = max(lambda2L,lambda2R);
                    const dfloat maxLambda = max(maxLambda1,maxLambda2);



                    NumFluxF[0]=half*(F1L+F1R );
                    NumFluxF[1]=half*(F2L+F2R );
                    NumFluxF[2]=half*(F3L+F3R );
                    NumFluxG[0]=half*(G1L+G1R );
                    NumFluxG[1]=half*(G2L+G2R );
                    NumFluxG[2]=half*(G3L+G3R );

                    NumFlux[0]=(nx*NumFluxF[0]+ny*NumFluxG[0]) - half*maxLambda*(hR-hL);
                    NumFlux[1]=(nx*NumFluxF[1]+ny*NumFluxG[1]) - half*maxLambda*(huR-huL);
                    NumFlux[2]=(nx*NumFluxF[2]+ny*NumFluxG[2]) - half*maxLambda*(hvR-hvL);


                    SurfaceParts[edgeID]          =  scaling*geomFace*  NumFlux[0];
                    SurfaceParts[edgeID+ngl]      =  scaling*geomFace*  NumFlux[1];
                    SurfaceParts[edgeID+ngl+ngl]  =  scaling*geomFace*  NumFlux[2];


                }
            }
        }
    }





}
